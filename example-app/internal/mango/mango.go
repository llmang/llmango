// Code generated by llmango CLI. DO NOT EDIT.
package mango

import (
	"encoding/json"
	"log"

	"github.com/llmang/llmango/llmango"
	"github.com/llmang/llmango/openrouter"
)

// Config-generated goals and prompts

// textSummaryGoal is generated from configuration
var textSummaryGoal = llmango.Goal{
	UID:         "text-summary",
	Title:       "Text Summary",
	Description: "Summarizes long text into key points",
	InputExample:  json.RawMessage(`{}`),
	OutputExample: json.RawMessage(`{}`),
}

// emailClassificationGoal is generated from configuration
var emailClassificationGoal = llmango.Goal{
	UID:         "email-classification",
	Title:       "Email Classification",
	Description: "Classifies emails into categories like spam, important, promotional",
	InputExample:  json.RawMessage(`{"body":"Don't miss out on our biggest sale of the year! Click here to shop now.","sender":"sales@example.com","subject":"Limited Time Offer - 50% Off Everything!"}`),
	OutputExample: json.RawMessage(`{"category":"promotional","confidence":0.92,"reasoning":"Contains promotional language and discount offers"}`),
}

// languageDetectionGoal is generated from configuration
var languageDetectionGoal = llmango.Goal{
	UID:         "language-detection",
	Title:       "Language Detection",
	Description: "Detects the language of input text",
	InputExample:  json.RawMessage(`{"text":"Bonjour, comment allez-vous aujourd'hui?"}`),
	OutputExample: json.RawMessage(`{"confidence":0.98,"language":"French","language_code":"fr"}`),
}

// sentimentAnalysisGoal is generated from configuration
var sentimentAnalysisGoal = llmango.Goal{
	UID:         "sentiment-analysis",
	Title:       "Sentiment Analysis",
	Description: "Analyzes the sentiment of text input",
	InputExample:  json.RawMessage(`{}`),
	OutputExample: json.RawMessage(`{}`),
}

// summaryStructuredPrompt is generated from configuration
var summaryStructuredPrompt = llmango.Prompt{
	UID:      "summary-structured",
	GoalUID:  "text-summary",
	Model:    "openai/gpt-3.5-turbo",
	Weight:   100,
	IsCanary: false,
	MaxRuns:  0,
	Messages: []openrouter.Message{
		{Role: "system", Content: "You are a text summarization expert. Create concise summaries with key points."},
		{Role: "user", Content: "Summarize this text: {{text}}"},
	},
}

// emailClassificationOpenaiPrompt is generated from configuration
var emailClassificationOpenaiPrompt = llmango.Prompt{
	UID:      "email-classification-openai",
	GoalUID:  "email-classification",
	Model:    "openai/gpt-4",
	Weight:   100,
	IsCanary: false,
	MaxRuns:  0,
	Messages: []openrouter.Message{
		{Role: "system", Content: "You are an email classification expert. Classify emails into categories: spam, important, promotional, personal, work."},
		{Role: "user", Content: "Classify this email:\nSubject: {{subject}}\nFrom: {{sender}}\nBody: {{body}}"},
	},
}

// emailClassificationClaudePrompt is generated from configuration
var emailClassificationClaudePrompt = llmango.Prompt{
	UID:      "email-classification-claude",
	GoalUID:  "email-classification",
	Model:    "anthropic/claude-3-sonnet",
	Weight:   100,
	IsCanary: false,
	MaxRuns:  0,
	Messages: []openrouter.Message{
		{Role: "system", Content: "You are an email classification expert. Classify emails into categories: spam, important, promotional, personal, work."},
		{Role: "user", Content: "Classify this email:\nSubject: {{subject}}\nFrom: {{sender}}\nBody: {{body}}"},
	},
}

// languageDetectionOpenaiPrompt is generated from configuration
var languageDetectionOpenaiPrompt = llmango.Prompt{
	UID:      "language-detection-openai",
	GoalUID:  "language-detection",
	Model:    "openai/gpt-3.5-turbo",
	Weight:   100,
	IsCanary: false,
	MaxRuns:  0,
	Messages: []openrouter.Message{
		{Role: "system", Content: "You are a language detection expert. Identify the language of the given text and provide the language name and ISO code."},
		{Role: "user", Content: "What language is this text: {{text}}"},
	},
}

// languageDetectionLlamaPrompt is generated from configuration
var languageDetectionLlamaPrompt = llmango.Prompt{
	UID:      "language-detection-llama",
	GoalUID:  "language-detection",
	Model:    "meta-llama/llama-3.1-405b-instruct",
	Weight:   100,
	IsCanary: false,
	MaxRuns:  0,
	Messages: []openrouter.Message{
		{Role: "system", Content: "You are a language detection expert. Identify the language of the given text and provide the language name and ISO code."},
		{Role: "user", Content: "What language is this text: {{text}}"},
	},
}

// sentimentUniversalPrompt is generated from configuration
var sentimentUniversalPrompt = llmango.Prompt{
	UID:      "sentiment-universal",
	GoalUID:  "sentiment-analysis",
	Model:    "anthropic/claude-3-sonnet",
	Weight:   100,
	IsCanary: false,
	MaxRuns:  0,
	Messages: []openrouter.Message{
		{Role: "system", Content: "You are a sentiment analysis expert. Analyze the sentiment of the given text and provide a confidence score."},
		{Role: "user", Content: "Analyze the sentiment of this text: {{text}}"},
	},
}

// summaryUniversalPrompt is generated from configuration
var summaryUniversalPrompt = llmango.Prompt{
	UID:      "summary-universal",
	GoalUID:  "text-summary",
	Model:    "meta-llama/llama-3.1-405b-instruct",
	Weight:   100,
	IsCanary: false,
	MaxRuns:  0,
	Messages: []openrouter.Message{
		{Role: "system", Content: "You are a text summarization expert. Create concise summaries with key points."},
		{Role: "user", Content: "Summarize this text: {{text}}"},
	},
}

// sentimentStructuredPrompt is generated from configuration
var sentimentStructuredPrompt = llmango.Prompt{
	UID:      "sentiment-structured",
	GoalUID:  "sentiment-analysis",
	Model:    "openai/gpt-4",
	Weight:   100,
	IsCanary: false,
	MaxRuns:  0,
	Messages: []openrouter.Message{
		{Role: "system", Content: "You are a sentiment analysis expert. Analyze the sentiment of the given text and provide a confidence score."},
		{Role: "user", Content: "Analyze the sentiment of this text: {{text}}"},
	},
}

type Mango struct {
	*llmango.LLMangoManager
}

func CreateMango(or *openrouter.OpenRouter) (*Mango, error) {
	llmangoManager, err := llmango.CreateLLMangoManger(or)
	if err != nil {
		log.Fatalf("failed to setup llmango manager: %v", err)
	}

	// Initialize goals
	llmangoManager.AddGoals(
		&textSummaryGoal,
		&emailClassificationGoal,
		&languageDetectionGoal,
		&sentimentAnalysisGoal,
	)

	// Initialize prompts
	llmangoManager.AddPrompts(
		&summaryStructuredPrompt,
		&emailClassificationOpenaiPrompt,
		&emailClassificationClaudePrompt,
		&languageDetectionOpenaiPrompt,
		&languageDetectionLlamaPrompt,
		&sentimentUniversalPrompt,
		&summaryUniversalPrompt,
		&sentimentStructuredPrompt,
	)

	return &Mango{llmangoManager}, nil
}


// TextSummary executes the Text Summary goal
func (m *Mango) TextSummary(input *SummaryInput) (*SummaryOutput, error) {
	return llmango.Run[SummaryInput, SummaryOutput](m.LLMangoManager, &textSummaryGoal, input)
}

// TextSummaryRaw executes the Text Summary goal and returns the raw OpenRouter response
func (m *Mango) TextSummaryRaw(input *SummaryInput) (*SummaryOutput, *openrouter.NonStreamingChatResponse, error) {
	return llmango.RunRaw[SummaryInput, SummaryOutput](m.LLMangoManager, &textSummaryGoal, input)
}

// EmailClassification executes the Email Classification goal
func (m *Mango) EmailClassification(input *EmailInput) (*EmailOutput, error) {
	return llmango.Run[EmailInput, EmailOutput](m.LLMangoManager, &emailClassificationGoal, input)
}

// EmailClassificationRaw executes the Email Classification goal and returns the raw OpenRouter response
func (m *Mango) EmailClassificationRaw(input *EmailInput) (*EmailOutput, *openrouter.NonStreamingChatResponse, error) {
	return llmango.RunRaw[EmailInput, EmailOutput](m.LLMangoManager, &emailClassificationGoal, input)
}

// LanguageDetection executes the Language Detection goal
func (m *Mango) LanguageDetection(input *LanguageInput) (*LanguageOutput, error) {
	return llmango.Run[LanguageInput, LanguageOutput](m.LLMangoManager, &languageDetectionGoal, input)
}

// LanguageDetectionRaw executes the Language Detection goal and returns the raw OpenRouter response
func (m *Mango) LanguageDetectionRaw(input *LanguageInput) (*LanguageOutput, *openrouter.NonStreamingChatResponse, error) {
	return llmango.RunRaw[LanguageInput, LanguageOutput](m.LLMangoManager, &languageDetectionGoal, input)
}

// SentimentAnalysis executes the Sentiment Analysis goal
func (m *Mango) SentimentAnalysis(input *SentimentInput) (*SentimentOutput, error) {
	return llmango.Run[SentimentInput, SentimentOutput](m.LLMangoManager, &sentimentAnalysisGoal, input)
}

// SentimentAnalysisRaw executes the Sentiment Analysis goal and returns the raw OpenRouter response
func (m *Mango) SentimentAnalysisRaw(input *SentimentInput) (*SentimentOutput, *openrouter.NonStreamingChatResponse, error) {
	return llmango.RunRaw[SentimentInput, SentimentOutput](m.LLMangoManager, &sentimentAnalysisGoal, input)
}
