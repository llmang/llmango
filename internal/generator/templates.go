package generator

import (
	"text/template"
)

// mangoFileTemplate is the template for generating mango.go
const mangoFileTemplate = `// Code generated by llmango CLI. DO NOT EDIT.
package {{.PackageName}}

import (
	"log"

	"github.com/llmang/llmango/llmango"
	"github.com/llmang/llmango/openrouter"
)

type Mango struct {
	*llmango.LLMangoManager
}

func CreateMango(or *openrouter.OpenRouter) (*Mango, error) {
	llmangoManager, err := llmango.CreateLLMangoManger(or)
	if err != nil {
		log.Fatalf("failed to setup llmango manager: %v", err)
	}

	// Initialize goals
	llmangoManager.AddGoals(
{{- range .Goals}}
		&{{.VarName}},
{{- end}}
	)

	// Initialize prompts
	llmangoManager.AddPrompts(
{{- range .Prompts}}
		&{{.VarName}},
{{- end}}
	)

	return &Mango{llmangoManager}, nil
}

{{range .Goals}}
// {{.MethodName}} executes the {{.Title}} goal
func (m *Mango) {{.MethodName}}(input *{{.InputType}}) (*{{.OutputType}}, error) {
	return llmango.Run[{{.InputType}}, {{.OutputType}}](m.LLMangoManager, &{{.VarName}}, input)
}

// {{.MethodName}}Raw executes the {{.Title}} goal and returns the raw OpenRouter response
func (m *Mango) {{.MethodName}}Raw(input *{{.InputType}}) (*{{.OutputType}}, *openrouter.NonStreamingChatResponse, error) {
	return llmango.RunRaw[{{.InputType}}, {{.OutputType}}](m.LLMangoManager, &{{.VarName}}, input)
}
{{end}}`

// configGoalTemplate is the template for generating goals from config
const configGoalTemplate = `
// {{.VarName}} is generated from configuration
var {{.VarName}} = llmango.Goal{
	UID:         "{{.UID}}",
	Title:       "{{.Title}}",
	Description: "{{.Description}}",
}
`

// configPromptTemplate is the template for generating prompts from config
const configPromptTemplate = `
// {{.VarName}} is generated from configuration
var {{.VarName}} = llmango.Prompt{
	UID:     "{{.UID}}",
	GoalUID: "{{.GoalUID}}",
	Model:   "{{.Model}}",
	Weight:  {{.Weight}},
	IsCanary: {{.IsCanary}},
	MaxRuns: {{.MaxRuns}},
	Messages: []openrouter.Message{
{{- range .Messages}}
		{Role: "{{.Role}}", Content: {{printf "%q" .Content}}},
{{- end}}
	},
}
`

// ParseTemplates parses all templates
func ParseTemplates() (*template.Template, error) {
	tmpl := template.New("mango")

	_, err := tmpl.New("mangoFile").Parse(mangoFileTemplate)
	if err != nil {
		return nil, err
	}

	_, err = tmpl.New("configGoal").Parse(configGoalTemplate)
	if err != nil {
		return nil, err
	}

	_, err = tmpl.New("configPrompt").Parse(configPromptTemplate)
	if err != nil {
		return nil, err
	}

	return tmpl, nil
}
