package generator

import (
	"text/template"
)

// mangoFileTemplate is the template for generating mango.go
const mangoFileTemplate = `// Code generated by llmango CLI. DO NOT EDIT.
package {{.PackageName}}

import (
	"encoding/json"
	"log"

	"github.com/llmang/llmango/llmango"
	"github.com/llmang/llmango/openrouter"
)

type Mango struct {
	*llmango.LLMangoManager
	Debug bool
}

func CreateMango(or *openrouter.OpenRouter) (*Mango, error) {
	llmangoManager, err := llmango.CreateLLMangoManger(or)
	if err != nil {
		log.Fatalf("failed to setup llmango manager: %v", err)
	}

	// Initialize goals
	llmangoManager.AddGoals(
{{- range .Goals}}
		&{{.VarName}},
{{- end}}
	)

	// Initialize prompts
	llmangoManager.AddPrompts(
{{- range .Prompts}}
		&{{.VarName}},
{{- end}}
	)

	return &Mango{
		LLMangoManager: llmangoManager,
		Debug:          false, // Can be enabled by calling SetDebug(true)
	}, nil
}

// SetDebug enables or disables debug logging for requests and responses
func (m *Mango) SetDebug(enabled bool) {
	m.Debug = enabled
}

// debugLog logs debug information if debug mode is enabled
func (m *Mango) debugLog(format string, args ...interface{}) {
	if m.Debug {
		log.Printf("[MANGO DEBUG] "+format, args...)
	}
}

{{range .Goals}}
// {{.MethodName}} executes the {{.Title}} goal
func (m *Mango) {{.MethodName}}(input *{{.InputType}}) (*{{.OutputType}}, error) {
	if m.Debug {
		m.debugLog("=== {{.MethodName}} Request ===")
		inputJSON, _ := json.MarshalIndent(input, "", "  ")
		m.debugLog("Input: %s", string(inputJSON))
		
		// Log goal schema information
		m.debugLog("Goal: %s (%s)", "{{.UID}}", "{{.Title}}")
		m.debugLog("Input Schema: %s", string({{.VarName}}.InputExample))
		m.debugLog("Output Schema: %s", string({{.VarName}}.OutputExample))
	}
	
	result, rawResponse, err := llmango.RunRaw[{{.InputType}}, {{.OutputType}}](m.LLMangoManager, &{{.VarName}}, input)
	
	if m.Debug {
		if err != nil {
			m.debugLog("Error: %v", err)
		} else {
			// Log the raw response details
			m.debugLog("Model Used: %s", rawResponse.Model)
			m.debugLog("Usage - Prompt Tokens: %d, Completion Tokens: %d, Total: %d",
				rawResponse.Usage.PromptTokens, rawResponse.Usage.CompletionTokens, rawResponse.Usage.TotalTokens)
			
			// Log the response
			resultJSON, _ := json.MarshalIndent(result, "", "  ")
			m.debugLog("Response: %s", string(resultJSON))
			
			// Log raw response if available
			if len(rawResponse.Choices) > 0 {
				m.debugLog("Raw Response Content: %s", rawResponse.Choices[0].Message.Content)
			}
		}
		m.debugLog("=== {{.MethodName}} Complete ===")
	}
	
	return result, err
}

// {{.MethodName}}Raw executes the {{.Title}} goal and returns the raw OpenRouter response
func (m *Mango) {{.MethodName}}Raw(input *{{.InputType}}) (*{{.OutputType}}, *openrouter.NonStreamingChatResponse, error) {
	return llmango.RunRaw[{{.InputType}}, {{.OutputType}}](m.LLMangoManager, &{{.VarName}}, input)
}
{{end}}`

// configGoalTemplate is the template for generating goals from config
const configGoalTemplate = `
// {{.VarName}} is generated from configuration
var {{.VarName}} = llmango.Goal{
	UID:         "{{.UID}}",
	Title:       "{{.Title}}",
	Description: "{{.Description}}",
	InputExample:  json.RawMessage(` + "`" + `{{.InputExampleJSON}}` + "`" + `),
	OutputExample: json.RawMessage(` + "`" + `{{.OutputExampleJSON}}` + "`" + `),
}
`

// configPromptTemplate is the template for generating prompts from config
const configPromptTemplate = `
// {{.VarName}} is generated from configuration
var {{.VarName}} = llmango.Prompt{
	UID:      "{{.UID}}",
	GoalUID:  "{{.GoalUID}}",
	Model:    "{{.Model}}",
	Weight:   {{.Weight}},
	IsCanary: {{.IsCanary}},
	MaxRuns:  {{.MaxRuns}},
	Messages: []openrouter.Message{
{{- range .Messages}}
		{Role: "{{.Role}}", Content: {{printf "%q" .Content}}},
{{- end}}
	},
}
`

// ParseTemplates parses all templates
func ParseTemplates() (*template.Template, error) {
	tmpl := template.New("mango")

	_, err := tmpl.New("mangoFile").Parse(mangoFileTemplate)
	if err != nil {
		return nil, err
	}

	_, err = tmpl.New("configGoal").Parse(configGoalTemplate)
	if err != nil {
		return nil, err
	}

	_, err = tmpl.New("configPrompt").Parse(configPromptTemplate)
	if err != nil {
		return nil, err
	}

	return tmpl, nil
}
