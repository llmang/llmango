package templates_templ

// OpenRouterModelStore component loads the OpenRouter models into an Alpine.js store
templ OpenRouterModelStore() {
	<script>
		// OpenRouter Model Fetcher
		document.addEventListener('alpine:init', () => {
			Alpine.store('modelStore', {
				models: [],
				loading: false,
				error: null,
				lastFetched: null,
				hasModels: false,

				async fetchModels(force = false) {
					// Check if we already have models and not forcing refresh
					if (this.models.length > 0 && !force) {
						return;
					}

					this.loading = true;
					this.error = null;

					try {
						const response = await fetch('https://openrouter.ai/api/v1/models');
						if (!response.ok) {
							throw new Error('Failed to fetch models: ' + response.status);
						}
						
						const data = await response.json();
						this.models = data.data || [];
						this.hasModels = this.models.length > 0;
						this.lastFetched = new Date().toISOString();
						
						// Save to localStorage for caching
						localStorage.setItem('openrouter_models', JSON.stringify({
							models: this.models,
							lastFetched: this.lastFetched
						}));
					} catch (err) {
						this.error = err.message;
						console.error('Error fetching models:', err);
					} finally {
						this.loading = false;
					}
				},

				init() {
					// Try to load from cache first
					const cached = localStorage.getItem('openrouter_models');
					if (cached) {
						try {
							const data = JSON.parse(cached);
							this.models = data.models || [];
							this.lastFetched = data.lastFetched;
							this.hasModels = this.models.length > 0;
						} catch (err) {
							console.error('Error parsing cached models:', err);
						}
					}

					// Fetch fresh data if cache is empty or stale (older than 24 hours)
					if (!this.models.length || this.isCacheStale()) {
						this.fetchModels();
					}
				},

				isCacheStale() {
					if (!this.lastFetched) return true;
					
					const lastFetchedDate = new Date(this.lastFetched);
					const now = new Date();
					// Check if last fetch was more than 24 hours ago
					return (now - lastFetchedDate) > (24 * 60 * 60 * 1000);
				},

				filteredModels(query = '') {
					if (!query) return this.models.slice().sort((a, b) => b.created - a.created);
					
					const lowerQuery = query.toLowerCase();
					return this.models
						.filter(model => 
							model.id.toLowerCase().includes(lowerQuery) || 
							model.name.toLowerCase().includes(lowerQuery)
						)
						.sort((a, b) => b.created - a.created);
				}
			});
		});
	</script>
}

templ Layout(title string, templBaseRoute string) {
	<!DOCTYPE html>
	<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>{ title } - LLMango</title>
		<script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.13.0/dist/cdn.min.js"></script>
		<!-- General Styles -->
		@Styles()
		<!-- OpenRouter Model Store -->
		@OpenRouterModelStore()
		<!-- Component Specific Styles -->
		@CardStyles()
		@PromptStyles()
		@ModalStyles()
		@LogStyles()
	</head>
	<body>
		<header>
			<h1>LLMango</h1>
			<nav>
				<a href={ safeURL(templBaseRoute + "/home") }>Home</a>
				<a href={ safeURL(templBaseRoute + "/prompt") }>Prompts</a>
				<a href={ safeURL(templBaseRoute + "/goal") }>Goals</a>
				<a href={ safeURL(templBaseRoute + "/models") }>Models</a>
				<a href={ safeURL(templBaseRoute + "/logs") }>Logs</a>
				<a>|</a>
				<span x-data>
					<span 
						x-show="$store.modelStore.hasModels" 
						title="OpenRouter models loaded"
						style="color: green; cursor: default;">models loaded âœ“</span>
					<span 
						@click="if(confirm('Refresh OpenRouter models?')) $store.modelStore.fetchModels(true)" 
						title="Refresh OpenRouter models"
						style="cursor: pointer; margin-left: 5px;">ðŸ”„</span>
				</span>
			</nav>
		</header>
		<main>
			{ children... }
		</main>
		<footer>
			<hr />
			<p>LLMango - A toolkit for building with LLMs in Go</p>
		</footer>
		@JSONFormatter()
	</body>
	</html>
}

templ Header(title string) {
	<header>
		<h1>{ title }</h1>
	</header>
}

templ Card(title string) {
	<div class="card">
		<h3>{ title }</h3>
		{ children... }
	</div>
} 


