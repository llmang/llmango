// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.857
package templates_templ

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"encoding/json"
	"github.com/llmang/llmango/llmango"
)

// LogTable displays a table of logs with the provided data
func LogTable() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"logs-container\"><template x-if=\"logs.length &gt; 0\"><div class=\"log-table\"><div class=\"log-header-row\"><div class=\"log-cell\">Time</div><div class=\"log-cell\">Goal ID</div><div class=\"log-cell\">Prompt ID</div><div class=\"log-cell\">Tokens</div><div class=\"log-cell\">Cost</div><div class=\"log-cell\">Actions</div></div><template x-for=\"log in logs\" :key=\"log.timestamp\"><div class=\"log-row-container\"><div class=\"log-row\"><div class=\"log-cell\" :title=\"new Date(log.timestamp * 1000).toLocaleString()\"><span x-text=\"new Date(log.timestamp * 1000).toLocaleString(&#39;en-GB&#39;, {day: &#39;2-digit&#39;, month: &#39;2-digit&#39;, year: &#39;2-digit&#39;, hour: &#39;2-digit&#39;, minute: &#39;2-digit&#39;, second: &#39;2-digit&#39;})\"></span></div><div class=\"log-cell\" :title=\"log.goalUID\"><span x-text=\"log.goalUID.substring(0, 10) + (log.goalUID.length &gt; 10 ? &#39;...&#39; : &#39;&#39;)\"></span></div><div class=\"log-cell\" :title=\"log.promptUID\"><span x-text=\"log.promptUID.substring(0, 10) + (log.promptUID.length &gt; 10 ? &#39;...&#39; : &#39;&#39;)\"></span></div><div class=\"log-cell\" :title=\"&#39;Input: &#39; + log.inputTokens + &#39; tokens, Output: &#39; + log.outputTokens + &#39; tokens&#39;\"><span class=\"token-count\" :title=\"&#39;Input Tokens: &#39; + log.inputTokens\" x-text=\"log.inputTokens\"></span> /  <span class=\"token-count\" :title=\"&#39;Output Tokens: &#39; + log.outputTokens\" x-text=\"log.outputTokens\"></span></div><div class=\"log-cell\" :title=\"&#39;Total cost: $&#39; + log.cost\"><span x-text=\"&#39;$&#39; + log.cost\"></span></div><div class=\"log-cell\"><button class=\"btn btn-sm btn-secondary\" @click=\"log.showDetails = !log.showDetails\"><span x-text=\"log.showDetails ? &#39;Hide&#39; : &#39;Show&#39;\"></span> Details</button></div></div><div class=\"log-details\" x-show=\"log.showDetails\" x-transition><div class=\"details-row\"><div class=\"details-cell\"><h5>Goal ID</h5><pre x-text=\"log.goalUID\"></pre></div><div class=\"details-cell\"><h5>Prompt ID</h5><pre x-text=\"log.promptUID\"></pre></div></div><div class=\"log-section\"><h5>Input</h5><pre x-text=\"log.inputObject\"></pre></div><div class=\"log-section\"><h5>Output</h5><pre x-text=\"log.outputObject\"></pre></div><template x-if=\"log.error\"><div class=\"log-section error\"><h5>Error</h5><pre x-text=\"log.error\"></pre></div></template></div></div></template></div></template><template x-if=\"logs.length === 0\"><p class=\"no-logs\">No logs found. Try adjusting your filters.</p></template></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

// PaginationView handles data loading and pagination for logs
func PaginationView() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var2 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var2 == nil {
			templ_7745c5c3_Var2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<div class=\"pagination-view\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = LogTable().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "<div class=\"pagination\" x-show=\"totalPages &gt; 1\"><button @click=\"prevPage()\" :disabled=\"currentPage === 1\">Previous</button> <span>Page <span x-text=\"currentPage\"></span> of <span x-text=\"totalPages\"></span></span> <button @click=\"nextPage()\" :disabled=\"currentPage === totalPages\">Next</button></div><div class=\"loading\" x-show=\"isLoading\">Loading logs...</div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

// LogLoader loads logs based on a specific value
func LogLoader(baseRoute string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var3 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var3 == nil {
			templ_7745c5c3_Var3 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "<div class=\"log-loader\" x-data=\"{ \n            logs: [],\n            currentPage: 1,\n            totalPages: 1,\n            isLoading: false,\n            filterOptions: {\n                goalId: null,\n                promptId: null,\n                perPage: 10\n            },\n            async loadLogs() {\n                this.isLoading = true;\n                try {\n                    let url = &#39;/mango/api/logs&#39;;\n                    \n                    // Add filter parameters\n                    const params = new URLSearchParams();\n                    params.append(&#39;page&#39;, this.currentPage.toString());\n                    params.append(&#39;perPage&#39;, this.filterOptions.perPage.toString());\n                    \n                    // Add all filter options to params\n                    if (this.filterOptions.goalId) {\n                        params.append(&#39;goalId&#39;, this.filterOptions.goalId);\n                    }\n                    if (this.filterOptions.promptId) {\n                        params.append(&#39;promptId&#39;, this.filterOptions.promptId);\n                    }\n                    \n                    const response = await fetch(url + &#39;?&#39; + params.toString());\n                    const data = await response.json();\n                    if (data.success) {\n                        this.logs = data.data.logs || [];\n                        this.totalPages = data.data.pagination.totalPages;\n                    }\n                } catch (error) {\n                    console.error(&#39;Failed to load logs:&#39;, error);\n                }\n                this.isLoading = false;\n            },\n            async prevPage() {\n                if (this.currentPage &gt; 1) {\n                    this.currentPage--;\n                    await this.loadLogs();\n                }\n            },\n            async nextPage() {\n                if (this.currentPage &lt; this.totalPages) {\n                    this.currentPage++;\n                    await this.loadLogs();\n                }\n            }\n        }\" x-init=\"loadLogs()\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = PaginationView().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "</div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

// LogPage is the main page for viewing logs with filters
func LogPage(baseRoute string, initialGoals map[string]any, initialPrompts map[string]*llmango.Prompt) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var4 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var4 == nil {
			templ_7745c5c3_Var4 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var5 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "<!-- Store data in hidden data attributes --> <div id=\"data-container\" style=\"display: none;\"></div><div class=\"debug-json\" style=\"display: none;\"><pre id=\"goals-data\" data-goals=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var6 string
			templ_7745c5c3_Var6, templ_7745c5c3_Err = templ.JoinStringErrs(jsonStr(initialGoals))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `logs.templ`, Line: 178, Col: 62}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var6))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, "\"></pre><pre id=\"prompts-data\" data-prompts=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var7 string
			templ_7745c5c3_Var7, templ_7745c5c3_Err = templ.JoinStringErrs(jsonStr(initialPrompts))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `logs.templ`, Line: 179, Col: 68}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var7))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, "\"></pre></div><div class=\"log-page\" x-data=\"{ \n            logs: [],\n            currentPage: 1,\n            totalPages: 1,\n            isLoading: false,\n            filterOptions: {\n                goalId: null,\n                promptId: null,\n                perPage: 10\n            },\n            goals: {},\n            prompts: {},\n            async loadLogs() {\n                this.isLoading = true;\n                \n                // Load the data from data attributes\n                try {\n                    const goalsData = document.getElementById(&#39;goals-data&#39;).getAttribute(&#39;data-goals&#39;);\n                    const promptsData = document.getElementById(&#39;prompts-data&#39;).getAttribute(&#39;data-prompts&#39;);\n                    \n                    if (goalsData) this.goals = JSON.parse(goalsData);\n                    if (promptsData) this.prompts = JSON.parse(promptsData);\n                } catch (error) {\n                    console.error(&#39;Failed to parse JSON data:&#39;, error);\n                }\n                \n                try {\n                    let url = &#39;/mango/api/logs&#39;;\n                    \n                    // Add filter parameters\n                    const params = new URLSearchParams();\n                    params.append(&#39;page&#39;, this.currentPage.toString());\n                    params.append(&#39;perPage&#39;, this.filterOptions.perPage.toString());\n                    \n                    // Add all filter options to params\n                    if (this.filterOptions.goalId) {\n                        params.append(&#39;goalId&#39;, this.filterOptions.goalId);\n                    }\n                    if (this.filterOptions.promptId) {\n                        params.append(&#39;promptId&#39;, this.filterOptions.promptId);\n                    }\n                    \n                    const response = await fetch(url + &#39;?&#39; + params.toString());\n                    const data = await response.json();\n                    if (data.success) {\n                        this.logs = data.data.logs || [];\n                        this.totalPages = data.data.pagination.totalPages;\n                    }\n                } catch (error) {\n                    console.error(&#39;Failed to load logs:&#39;, error);\n                }\n                this.isLoading = false;\n            },\n            async prevPage() {\n                if (this.currentPage &gt; 1) {\n                    this.currentPage--;\n                    await this.loadLogs();\n                }\n            },\n            async nextPage() {\n                if (this.currentPage &lt; this.totalPages) {\n                    this.currentPage++;\n                    await this.loadLogs();\n                }\n            },\n            resetFilters() {\n                this.filterOptions = {\n                    goalId: null,\n                    promptId: null,\n                    perPage: 10\n                };\n                this.currentPage = 1;\n                this.loadLogs();\n            }\n        }\" x-init=\"loadLogs()\"><div class=\"filters-section\"><h3>Filter Logs</h3><div class=\"filter-controls\"><div class=\"filter-group\"><label for=\"goalFilter\">Goal:</label> <select id=\"goalFilter\" x-model=\"filterOptions.goalId\" @change=\"currentPage = 1; loadLogs()\"><option value=\"\">All Goals</option><template x-for=\"(goal, id) in goals\" :key=\"id\"><option :value=\"id\" x-text=\"goal.Title || id\"></option></template></select></div><div class=\"filter-group\"><label for=\"promptFilter\">Prompt:</label> <select id=\"promptFilter\" x-model=\"filterOptions.promptId\" @change=\"currentPage = 1; loadLogs()\"><option value=\"\">All Prompts</option><template x-for=\"(prompt, id) in prompts\" :key=\"id\"><option :value=\"id\" x-text=\"prompt.Name || id\"></option></template></select></div><div class=\"filter-group\"><label for=\"perPageFilter\">Per Page:</label> <select id=\"perPageFilter\" x-model=\"filterOptions.perPage\" @change=\"currentPage = 1; loadLogs()\"><option value=\"5\">5</option> <option value=\"10\">10</option> <option value=\"20\">20</option> <option value=\"50\">50</option></select></div><button class=\"btn btn-secondary\" @click=\"resetFilters\">Reset Filters</button></div></div><!-- Logs Table --><div class=\"logs-container\"><template x-if=\"logs.length &gt; 0\"><div class=\"log-table\"><div class=\"log-header-row\"><div class=\"log-cell\">Time</div><div class=\"log-cell\">Goal ID</div><div class=\"log-cell\">Prompt ID</div><div class=\"log-cell\">Tokens</div><div class=\"log-cell\">Cost</div><div class=\"log-cell\">Actions</div></div><template x-for=\"log in logs\" :key=\"log.timestamp\"><div class=\"log-row-container\"><div class=\"log-row\"><div class=\"log-cell\" :title=\"new Date(log.timestamp * 1000).toLocaleString()\"><span x-text=\"new Date(log.timestamp * 1000).toLocaleString(&#39;en-GB&#39;, {day: &#39;2-digit&#39;, month: &#39;2-digit&#39;, year: &#39;2-digit&#39;, hour: &#39;2-digit&#39;, minute: &#39;2-digit&#39;, second: &#39;2-digit&#39;})\"></span></div><div class=\"log-cell\" :title=\"log.goalUID\"><span x-text=\"log.goalUID.substring(0, 10) + (log.goalUID.length &gt; 10 ? &#39;...&#39; : &#39;&#39;)\"></span></div><div class=\"log-cell\" :title=\"log.promptUID\"><span x-text=\"log.promptUID.substring(0, 10) + (log.promptUID.length &gt; 10 ? &#39;...&#39; : &#39;&#39;)\"></span></div><div class=\"log-cell\" :title=\"&#39;Input: &#39; + log.inputTokens + &#39; tokens, Output: &#39; + log.outputTokens + &#39; tokens&#39;\"><span class=\"token-count\" :title=\"&#39;Input Tokens: &#39; + log.inputTokens\" x-text=\"log.inputTokens\"></span> /  <span class=\"token-count\" :title=\"&#39;Output Tokens: &#39; + log.outputTokens\" x-text=\"log.outputTokens\"></span></div><div class=\"log-cell\" :title=\"&#39;Total cost: $&#39; + log.cost\"><span x-text=\"&#39;$&#39; + log.cost\"></span></div><div class=\"log-cell\"><button class=\"btn btn-sm btn-secondary\" @click=\"log.showDetails = !log.showDetails\"><span x-text=\"log.showDetails ? &#39;Hide&#39; : &#39;Show&#39;\"></span> Details</button></div></div><div class=\"log-details\" x-show=\"log.showDetails\" x-transition><div class=\"details-row\"><div class=\"details-cell\"><h5>Goal ID</h5><pre x-text=\"log.goalUID\"></pre></div><div class=\"details-cell\"><h5>Prompt ID</h5><pre x-text=\"log.promptUID\"></pre></div></div><div class=\"log-section\"><h5>Input</h5><pre x-text=\"log.inputObject\"></pre></div><div class=\"log-section\"><h5>Output</h5><pre x-text=\"log.outputObject\"></pre></div><template x-if=\"log.error\"><div class=\"log-section error\"><h5>Error</h5><pre x-text=\"log.error\"></pre></div></template></div></div></template></div></template><template x-if=\"logs.length === 0\"><p class=\"no-logs\">No logs found. Try adjusting your filters.</p></template></div><div class=\"pagination\" x-show=\"totalPages &gt; 1\"><button @click=\"prevPage()\" :disabled=\"currentPage === 1\">Previous</button> <span>Page <span x-text=\"currentPage\"></span> of <span x-text=\"totalPages\"></span></span> <button @click=\"nextPage()\" :disabled=\"currentPage === totalPages\">Next</button></div><div class=\"loading\" x-show=\"isLoading\">Loading logs...</div></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = Layout("Logs", baseRoute).Render(templ.WithChildren(ctx, templ_7745c5c3_Var5), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func serializeJSON(v interface{}) string {
	if v == nil {
		return "{}"
	}
	data, err := json.Marshal(v)
	if err != nil {
		return "{}"
	}
	return string(data)
}

// LogViewer component displays logs from the system
func LogViewer(baseRoute string, initialGoals map[string]any, initialPrompts map[string]*llmango.Prompt) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var8 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var8 == nil {
			templ_7745c5c3_Var8 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, "<div class=\"log-viewer\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = LogPage(baseRoute, initialGoals, initialPrompts).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 10, "</div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

// LogStyles component contains CSS styles for log components
func LogStyles() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var9 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var9 == nil {
			templ_7745c5c3_Var9 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 11, "<style>\n\n        .log-table {\n        width: 100%;\n        border-collapse: collapse;\n    }\n\n    .log-header-row {\n        display: flex;\n        padding: 0.5rem;\n        background-color: #f5f5f5;\n        font-weight: bold;\n        border-bottom: 2px solid #ddd;\n    }\n\n    .log-row-container {\n        display: flex;\n        flex-direction: column;\n        border-bottom: 1px solid #eee;\n    }\n\n    .log-row {\n        display: flex;\n        padding: 0.5rem;\n        align-items: center;\n        font-size: 0.85rem;\n    }\n\n    .log-cell {\n        flex: 1;\n        padding: 0 0.5rem;\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n    }\n\n    .log-cell[title]:hover {\n        cursor: help;\n    }\n\n    .token-count {\n        display: inline-block;\n        min-width: 2.5rem;\n        text-align: right;\n    }\n\n\n\n    .log-details {\n        width: 100%;\n        padding: 1rem;\n        background-color: #f8f8f8;\n        border-top: 1px solid #ddd;\n        font-size: 1rem;\n    }\n\n    .details-row {\n        display: flex;\n        gap: 1rem;\n        margin-bottom: 1rem;\n    }\n\n    .details-cell {\n        flex: 1;\n    }\n\n    .details-cell h5 {\n        margin: 0 0 0.5rem 0;\n        color: #666;\n    }\n\n    .details-cell pre {\n        background-color: #fff;\n        padding: 0.5rem;\n        border-radius: 0.25rem;\n        overflow-x: auto;\n        margin: 0;\n        white-space: pre-wrap;\n        word-wrap: break-word;\n    }\n\n\n\n        .log-section:last-child {\n            margin-bottom: 0;\n        }\n\n        .log-section h5 {\n            margin: 0 0 0.5rem 0;\n            color: #666;\n        }\n\n        .log-section pre {\n            background-color: #fff;\n            padding: 0.5rem;\n            border-radius: 0.25rem;\n            overflow-x: auto;\n            margin: 0;\n            white-space: pre-wrap;\n            word-wrap: break-word;\n        }\n\n        .log-section.error {\n            color: #dc3545;\n        }\n        /* Log viewer styles */\n        .filters-section {\n            background-color: #f8f8f8;\n            border-radius: 5px;\n            padding: 15px;\n            margin-bottom: 20px;\n        }\n        \n        .filters-section h3 {\n            margin-top: 0;\n            margin-bottom: 15px;\n        }\n        \n        .filter-controls {\n            display: flex;\n            flex-wrap: wrap;\n            gap: 15px;\n            align-items: flex-end;\n        }\n        \n        .filter-group {\n            display: flex;\n            flex-direction: column;\n            min-width: 150px;\n        }\n        \n        .filter-group label {\n            margin-bottom: 5px;\n            font-size: 0.9rem;\n        }\n        \n        .log-viewer {\n            margin-top: 20px;\n        }\n        \n        .logs-container {\n            margin-bottom: 20px;\n        }\n        \n        .log-table {\n            width: 100%;\n            border-collapse: collapse;\n        }\n        \n        .log-header-row {\n            background-color: #f5f5f5;\n            font-weight: bold;\n            display: flex;\n        }\n        \n        .log-row {\n            display: flex;\n            border-bottom: 1px solid #eee;\n        }\n        \n        .log-cell {\n            padding: 10px;\n            flex: 1;\n            min-width: 0;\n            overflow: hidden;\n            text-overflow: ellipsis;\n            white-space: nowrap;\n        }\n        \n        .log-details {\n            padding: 15px;\n            background-color: #f9f9f9;\n            border-bottom: 1px solid #eee;\n        }\n        \n        .details-row {\n            display: flex;\n            margin-bottom: 15px;\n        }\n        \n        .details-cell {\n            flex: 1;\n            padding-right: 15px;\n        }\n        \n        .log-section {\n            margin-bottom: 15px;\n        }\n        \n        .log-section h5 {\n            margin-top: 0;\n            margin-bottom: 5px;\n        }\n        \n        .token-count {\n            font-family: monospace;\n        }\n        \n        .error {\n            color: #d32f2f;\n        }\n        \n        .pagination {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            gap: 15px;\n            margin-top: 20px;\n        }\n        \n        .loading {\n            text-align: center;\n            padding: 20px;\n            font-style: italic;\n            color: #666;\n        }\n        \n        .no-logs {\n            text-align: center;\n            padding: 20px;\n            color: #666;\n            font-style: italic;\n        }\n\n            .pagination {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        gap: 1rem;\n        margin-top: 1rem;\n    }\n        \n        /* JSON formatter styles */\n        .json-container {\n            font-family: monospace;\n            background: #f5f5f5;\n            padding: 10px;\n            border-radius: 4px;\n            white-space: pre-wrap;\n        }\n    </style>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
