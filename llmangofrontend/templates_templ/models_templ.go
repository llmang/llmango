// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.857
package templates_templ

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

// ModelsPage component displays all available OpenRouter models
func ModelsPage(baseRoute string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var2 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<h2>OpenRouter Models</h2><div x-data=\"{\n\t\t\tsearchQuery: &#39;&#39;,\n\t\t\texpandedModel: null\n\t\t}\"><div style=\"margin-bottom: 20px;\"><div style=\"display: flex; align-items: center; gap: 10px; margin-bottom: 15px;\"><input type=\"text\" x-model=\"searchQuery\" placeholder=\"Search models...\" class=\"form-control\" style=\"max-width: 300px;\"> <button class=\"btn btn-primary\" @click=\"$store.modelStore.fetchModels(true)\" x-bind:disabled=\"$store.modelStore.loading\"><span x-show=\"$store.modelStore.loading\">Loading...</span> <span x-show=\"!$store.modelStore.loading\">Refresh Models</span></button></div><p x-show=\"$store.modelStore.lastFetched\">Last updated: <span x-text=\"new Date($store.modelStore.lastFetched).toLocaleString()\"></span></p><p x-show=\"$store.modelStore.error\" style=\"color: red;\" x-text=\"$store.modelStore.error\"></p></div><div x-show=\"$store.modelStore.loading\" class=\"loading\">Loading models...</div><div x-show=\"!$store.modelStore.loading &amp;&amp; $store.modelStore.models.length === 0\" class=\"no-models\">No models available. Click \"Refresh Models\" to fetch the latest models.</div><div x-show=\"!$store.modelStore.loading &amp;&amp; $store.modelStore.models.length &gt; 0\"><div style=\"display: grid; grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); gap: 15px;\"><template x-for=\"model in $store.modelStore.filteredModels(searchQuery)\" :key=\"model.id\"><div class=\"card\" style=\"display: flex; flex-direction: column; cursor: pointer;\" @click=\"expandedModel = expandedModel === model.id ? null : model.id\"><!-- Model header --><div style=\"display: flex; justify-content: space-between; align-items: center;\"><h3 style=\"margin: 0;\" x-text=\"model.name\"></h3><div><small x-text=\"new Date(model.created * 1000).toLocaleDateString()\"></small></div></div><!-- Expandable details --><div x-show=\"expandedModel === model.id\" x-transition><hr style=\"margin: 10px 0;\"><div><div><strong>ID:</strong> <code x-text=\"model.id\"></code></div><div><strong>Context Length:</strong> <span x-text=\"model.context_length.toLocaleString()\"></span></div><div><strong>Pricing:</strong><div style=\"margin-left: 10px;\"><div>Prompt: $<span x-text=\"parseFloat(model.pricing.prompt).toFixed(7)\"></span> / token</div><div>Completion: $<span x-text=\"parseFloat(model.pricing.completion).toFixed(7)\"></span> / token</div></div></div></div><div style=\"margin: 10px 0;\" x-text=\"model.description || &#39;No description available&#39;\"></div><div><div x-show=\"model.architecture\"><strong>Modalities:</strong><div><strong>Input:</strong> <span x-text=\"model.architecture &amp;&amp; model.architecture.input_modalities ? model.architecture.input_modalities.join(&#39;, &#39;) : &#39;text&#39;\"></span></div><div><strong>Output:</strong> <span x-text=\"model.architecture &amp;&amp; model.architecture.output_modalities ? model.architecture.output_modalities.join(&#39;, &#39;) : &#39;text&#39;\"></span></div></div></div></div><!-- Expansion indicator --><div style=\"text-align: center; margin-top: 5px;\"><span x-text=\"expandedModel === model.id ? &#39;▲ Collapse&#39; : &#39;▼ Details&#39;\"></span></div></div></template></div></div></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = Layout("Models", baseRoute).Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

// ModelSelector component creates a dropdown to select LLM models
// Parameters:
// - isOpenVar: The Alpine.js variable to control visibility
func ModelSelector(isOpenVar string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var3 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var3 == nil {
			templ_7745c5c3_Var3 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<div x-show=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var4 string
		templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(isOpenVar)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `models.templ`, Line: 112, Col: 24}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "\" x-cloak class=\"model-selector-overlay\"><div class=\"model-selector-container\" @click.stop x-data=\"{\n\t\t\tsearchQuery: &#39;&#39;,\n\t\t\tmodels: [],\n\t\t\tloading: true,\n\t\t\terror: null,\n\t\t\t\n\t\t\tinit() {\n\t\t\t\tthis.fetchModels();\n\t\t\t},\n\t\t\t\n\t\t\tfetchModels() {\n\t\t\t\tthis.loading = true;\n\t\t\t\tthis.error = null;\n\t\t\t\t\n\t\t\t\tfetch(&#39;/api/models&#39;)\n\t\t\t\t\t.then(response =&gt; {\n\t\t\t\t\t\tif (!response.ok) throw new Error(&#39;Failed to fetch models&#39;);\n\t\t\t\t\t\treturn response.json();\n\t\t\t\t\t})\n\t\t\t\t\t.then(data =&gt; {\n\t\t\t\t\t\tthis.models = data.models || [];\n\t\t\t\t\t\tthis.loading = false;\n\t\t\t\t\t})\n\t\t\t\t\t.catch(error =&gt; {\n\t\t\t\t\t\tthis.error = error.message;\n\t\t\t\t\t\tthis.loading = false;\n\t\t\t\t\t});\n\t\t\t},\n\t\t\t\n\t\t\tfilteredModels() {\n\t\t\t\tif (!this.searchQuery) return this.models;\n\t\t\t\t\n\t\t\t\tconst query = this.searchQuery.toLowerCase();\n\t\t\t\treturn this.models.filter(model =&gt; \n\t\t\t\t\tmodel.name.toLowerCase().includes(query) || \n\t\t\t\t\tmodel.id.toLowerCase().includes(query)\n\t\t\t\t);\n\t\t\t},\n\t\t\t\n\t\t\tcloseSelector() {\n\t\t\t\t// Using Alpine&#39;s $dispatch to emit an event to the parent\n\t\t\t\tthis.$dispatch(&#39;close-model-selector&#39;);\n\t\t\t},\n\t\t\t\n\t\t\tselectModel(model) {\n\t\t\t\t// Using Alpine&#39;s $dispatch to emit an event with the selected model\n\t\t\t\tthis.$dispatch(&#39;model-selected&#39;, { modelId: model.id });\n\t\t\t\tthis.closeSelector();\n\t\t\t}\n\t\t}\"><div class=\"model-selector-header\"><h3>Select Model</h3><button @click=\"closeSelector()\" type=\"button\" class=\"close-button\" aria-label=\"Close\">×</button></div><div class=\"model-selector-search\"><input type=\"text\" x-model=\"searchQuery\" placeholder=\"Search models...\" class=\"form-control\"></div><div class=\"model-selector-content\"><div x-show=\"loading\" class=\"model-selector-loading\">Loading models...</div><div x-show=\"error\" class=\"model-selector-error\"><p x-text=\"error\"></p><button @click=\"fetchModels()\" class=\"btn btn-primary\">Retry</button></div><div x-show=\"!loading &amp;&amp; !error &amp;&amp; filteredModels().length === 0\" class=\"model-selector-empty\">No models found matching your search.</div><div x-show=\"!loading &amp;&amp; !error &amp;&amp; filteredModels().length &gt; 0\" class=\"model-selector-list\"><template x-for=\"model in filteredModels()\" :key=\"model.id\"><div class=\"model-selector-item\" @click=\"selectModel(model)\"><div class=\"model-selector-item-name\" x-text=\"model.name\"></div><div class=\"model-selector-item-id\" x-text=\"model.id\"></div></div></template></div></div></div></div><script>\n\t\t// Set up event listeners to connect the selector with the parent component\n\t\tdocument.addEventListener('alpine:initialized', () => {\n\t\t\tdocument.addEventListener('close-model-selector', () => {\n\t\t\t\t// Find the parent component and set its variable\n\t\t\t\tAlpine.evaluate(document.querySelector(`[x-data]`), `{ isOpenVar } = false`);\n\t\t\t});\n\t\t\t\n\t\t\tdocument.addEventListener('model-selected', (event) => {\n\t\t\t\t// Find the parent component and set its model\n\t\t\t\tif (event.detail && event.detail.modelId) {\n\t\t\t\t\tAlpine.evaluate(document.querySelector(`[x-data]`), `model = '${event.detail.modelId}'`);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t</script><style>\n\t\t.model-selector-overlay {\n\t\t\tposition: fixed;\n\t\t\ttop: 0;\n\t\t\tleft: 0;\n\t\t\twidth: 100%;\n\t\t\theight: 100%;\n\t\t\tbackground: rgba(0,0,0,0.5);\n\t\t\tdisplay: flex;\n\t\t\tjustify-content: center;\n\t\t\talign-items: center;\n\t\t\tz-index: 2000;\n\t\t}\n\t\t\n\t\t.model-selector-container {\n\t\t\tbackground: white;\n\t\t\tborder-radius: 8px;\n\t\t\twidth: 90%;\n\t\t\tmax-width: 500px;\n\t\t\tmax-height: 80vh;\n\t\t\tbox-shadow: 0 4px 20px rgba(0,0,0,0.15);\n\t\t\tdisplay: flex;\n\t\t\tflex-direction: column;\n\t\t}\n\t\t\n\t\t.model-selector-header {\n\t\t\tdisplay: flex;\n\t\t\tjustify-content: space-between;\n\t\t\talign-items: center;\n\t\t\tpadding: 15px 20px;\n\t\t\tborder-bottom: 1px solid #eee;\n\t\t}\n\t\t\n\t\t.model-selector-header h3 {\n\t\t\tmargin: 0;\n\t\t\tfont-size: 1.2rem;\n\t\t}\n\t\t\n\t\t.model-selector-search {\n\t\t\tpadding: 10px 20px;\n\t\t\tborder-bottom: 1px solid #eee;\n\t\t}\n\t\t\n\t\t.model-selector-content {\n\t\t\toverflow-y: auto;\n\t\t\tmax-height: calc(80vh - 130px);\n\t\t\tpadding: 10px 0;\n\t\t}\n\t\t\n\t\t.model-selector-loading,\n\t\t.model-selector-error,\n\t\t.model-selector-empty {\n\t\t\tpadding: 20px;\n\t\t\ttext-align: center;\n\t\t\tcolor: #666;\n\t\t}\n\t\t\n\t\t.model-selector-list {\n\t\t\tdisplay: flex;\n\t\t\tflex-direction: column;\n\t\t}\n\t\t\n\t\t.model-selector-item {\n\t\t\tpadding: 10px 20px;\n\t\t\tcursor: pointer;\n\t\t\tborder-bottom: 1px solid #f5f5f5;\n\t\t\ttransition: background-color 0.2s;\n\t\t}\n\t\t\n\t\t.model-selector-item:hover {\n\t\t\tbackground-color: #f8f8f8;\n\t\t}\n\t\t\n\t\t.model-selector-item-name {\n\t\t\tfont-weight: 500;\n\t\t\tmargin-bottom: 4px;\n\t\t}\n\t\t\n\t\t.model-selector-item-id {\n\t\t\tfont-size: 0.8rem;\n\t\t\tcolor: #666;\n\t\t\tfont-family: monospace;\n\t\t}\n\t</style>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
