// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.857
package templates_templ

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"encoding/json"
	"fmt"
	"github.com/llmang/llmango/llmango"
	"reflect"
)

// safeURL creates a templ.SafeURL from a string
func safeURL(url string) templ.SafeURL {
	return templ.SafeURL(url)
}

// Helper function to convert int to string
func intToString(n int) string {
	return fmt.Sprintf("%d", n)
}

// Helper function to convert object to JSON string
func jsonStr(obj interface{}) string {
	b, err := json.Marshal(obj)
	if err != nil {
		return "{}"
	}
	return string(b)
}

// Helper function to get goal information
func getGoalInfo(goalAny any) map[string]interface{} {
	// Try to get GoalInfo using type assertion first
	if goal, ok := goalAny.(interface{ GetGoalInfo() *llmango.GoalInfo }); ok {
		info := goal.GetGoalInfo()
		result := map[string]interface{}{
			"Title":       info.Title,
			"Description": info.Description,
			"UID":         info.UID,
			"Solutions":   info.Solutions,
		}
		return result
	}

	// Try direct marshaling to see if that works better with generics
	if goalJSON, err := json.Marshal(goalAny); err == nil {
		var result map[string]interface{}
		if err := json.Unmarshal(goalJSON, &result); err == nil {
			// Make sure it has key fields expected by templates
			if _, hasTitle := result["title"]; hasTitle {
				result["Title"] = result["title"]
			}
			if _, hasDesc := result["description"]; hasDesc {
				result["Description"] = result["description"]
			}
			if _, hasUID := result["UID"]; hasUID {
				// It's already capitalized, good
			} else if _, hasUID := result["uid"]; hasUID {
				result["UID"] = result["uid"]
			}
			if _, hasSolutions := result["solutions"]; hasSolutions {
				result["Solutions"] = result["solutions"]
			}
			return result
		}
	}

	// If marshaling fails, fall back to reflection
	v := reflect.ValueOf(goalAny)

	// If it's a pointer, get the value it points to
	if v.Kind() == reflect.Ptr {
		v = v.Elem()
	}

	// Must be a struct to proceed
	if v.Kind() != reflect.Struct {
		return map[string]interface{}{
			"Title":       "Unknown Goal",
			"Description": "Goal information unavailable (not a struct)",
			"Solutions":   make(map[string]*llmango.Solution),
		}
	}

	// Build a map with the goal info
	result := map[string]interface{}{}

	// First, try to extract the embedded GoalInfo fields
	goalInfoField := v.FieldByName("GoalInfo")
	if goalInfoField.IsValid() {
		// Extract fields from embedded GoalInfo
		title := goalInfoField.FieldByName("Title")
		if title.IsValid() {
			result["Title"] = title.String()
		}

		desc := goalInfoField.FieldByName("Description")
		if desc.IsValid() {
			result["Description"] = desc.String()
		}

		uid := goalInfoField.FieldByName("UID")
		if uid.IsValid() {
			result["UID"] = uid.String()
		}

		solutions := goalInfoField.FieldByName("Solutions")
		if solutions.IsValid() {
			result["Solutions"] = solutions.Interface()
		} else {
			result["Solutions"] = make(map[string]*llmango.Solution)
		}
	} else {
		// Try to access fields directly on the struct (they might not be in an embedded GoalInfo)
		title := v.FieldByName("Title")
		if title.IsValid() {
			result["Title"] = title.String()
		}

		desc := v.FieldByName("Description")
		if desc.IsValid() {
			result["Description"] = desc.String()
		}

		uid := v.FieldByName("UID")
		if uid.IsValid() {
			result["UID"] = uid.String()
		}

		solutions := v.FieldByName("Solutions")
		if solutions.IsValid() {
			result["Solutions"] = solutions.Interface()
		}
	}

	// Try to extract example input and output fields
	exampleInput := v.FieldByName("ExampleInput")
	if exampleInput.IsValid() {
		inputJSON, err := json.Marshal(exampleInput.Interface())
		if err == nil {
			result["ExampleInput"] = string(inputJSON)
		}
	}

	exampleOutput := v.FieldByName("ExampleOutput")
	if exampleOutput.IsValid() {
		outputJSON, err := json.Marshal(exampleOutput.Interface())
		if err == nil {
			result["ExampleOutput"] = string(outputJSON)
		}
	}

	// If we couldn't extract title and description, use defaults
	if _, hasTitle := result["Title"]; !hasTitle {
		result["Title"] = "Unknown Goal"
	}

	if _, hasDesc := result["Description"]; !hasDesc {
		result["Description"] = "Goal information unavailable"
	}

	if _, hasSolutions := result["Solutions"]; !hasSolutions {
		result["Solutions"] = make(map[string]*llmango.Solution)
	}

	return result
}

// Styles component contains all general CSS styles for the application
func Styles() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<style>\n\t\t* {box-sizing:border-box;}\n\t\tbody { font-family: sans-serif; line-height: 1.6; padding: 20px; max-width: 900px; margin: auto; color: #333; }\n\t\th1, h2, h3 { color: #444; }\n\t\tul { list-style: none; padding: 0; }\n\t\tli { background-color: #eee; margin-bottom: 5px; padding: 8px 12px; border-radius: 3px; }\n\t\thr { border: 0; height: 1px; background: #ddd; margin: 30px 0; }\n\t\tcode { background-color: #f0f0f0; padding: 2px 5px; border-radius: 3px; }\n\t\tol li { background-color: transparent; margin-bottom: 10px; padding: 0; }\n\t\tnav { margin-bottom: 25px; border-bottom: 1px solid #eee; padding-bottom: 10px; }\n\t\tnav a { margin-right: 15px; text-decoration: none; color: #007bff; }\n\t\tnav a:hover { text-decoration: underline; }\n\t\tbutton:hover{\n\t\t\tfilter:invert(.1);\n\t\t}\n\n\t\t.warning-text {\n\t\t\tcolor: #dc3545;\n\t\t\tmargin-bottom: 1rem;\n\t\t\tfont-size: 0.9rem;\n\t\t}\n\t\t\n\t\t.unsafe-buttons {\n\t\t\tdisplay: flex;\n\t\t\tgap: 0.5rem;\n\t\t}\n\n\t\t    .btn {\n        padding: 0.5rem 1rem;\n        border-radius: 0.25rem;\n        border: none;\n        cursor: pointer;\n        font-size: 1rem;\n\t\t}\n\n\t\t.btn-primary {\n\t\t\tbackground-color: #007bff;\n\t\t\tcolor: white;\n\t\t}\n\n\t\t.btn-secondary {\n\t\t\tcolor:black;\n\t\t\tbackground-color: rgb(233, 239, 241);\n\t\t}\n\n\t\t.btn-warning {\n\t\t\tbackground-color: #ffc107;\n\t\t\tcolor: #000;\n\t\t}\n\t\t\n\t\t.btn-danger {\n\t\t\tbackground-color: #dc3545;\n\t\t\tcolor: white;\n\t\t}\n\t\t.btn-sm {\n\t\t\tpadding: 0.25rem 0.5rem;\n\t\t\tfont-size: 0.875rem;\n\t\t}\n\n\t\t.loading {\n\t\t\ttext-align: center;\n\t\t\tpadding: 1rem;\n\t\t\tcolor: #666;\n\t\t}\n\n\t\tpre { \n\t\t\tbackground: #f5f5f5; \n\t\t\tpadding: 10px; \n\t\t\tborder-radius: 4px; \n\t\t\twhite-space: pre-wrap;\n\t\t\tword-wrap: break-word;\n\t\t\tword-break: break-word;\n\t\t\toverflow-wrap: break-word;\n\t\t\tmax-width: 100%;\n\t\t}\n\t\t\t    .json-preview {\n\t\t\tbackground-color: #f5f5f5;\n\t\t\tborder-radius: 0.25rem;\n\t\t\tpadding: 0.75rem;\n\t\t\tfont-family: monospace;\n\t\t\tfont-size: 0.8rem;\n\t\t\tmax-height: 200px;\n\t\t\toverflow: auto;\n\t\t\twhite-space: pre-wrap;\n\t\t\tmargin-bottom: 1.5rem;\n\t\t\tposition: relative;\n\t\t\t\n\t\t\t/* Custom syntax highlighting */\n\t\t\tcolor: #333;\n\t\t}\n\n\n\t\t.form-group {\n\t\t\tmargin-bottom: 1.5rem;\n\t\t}\n\n\t\t.form-control {\n\t\t\twidth: 100%;\n\t\t\tpadding: 0.5rem;\n\t\t\tborder: 1px solid #ddd;\n\t\t\tborder-radius: 0.25rem;\n\t\t\tfont-size: 1rem;\n    }\n\n\n\n\t\t.json-key { color: #0057b7; }\n\t\t.json-string { color: #008000; }\n\t\t.json-number { color: #a31515; }\n\t\t.json-boolean { color: #0000ff; }\n\t\t.json-null { color: #808080; }\n\t</style>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

// JSONFormatter component includes the JavaScript for formatting JSON in previews
func JSONFormatter() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var2 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var2 == nil {
			templ_7745c5c3_Var2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<script>\n\t\tdocument.addEventListener('DOMContentLoaded', function() {\n\t\t\t// Format all JSON preview elements\n\t\t\tdocument.querySelectorAll('.json-preview').forEach(function(element) {\n\t\t\t\ttry {\n\t\t\t\t\tconst jsonText = element.textContent;\n\t\t\t\t\tconst jsonData = JSON.parse(jsonText);\n\t\t\t\t\tconst formatted = JSON.stringify(jsonData, null, 2);\n\t\t\t\t\telement.textContent = formatted;\n\t\t\t\t} catch(e) {\n\t\t\t\t\t// If parsing fails, keep the original content\n\t\t\t\t\tconsole.error('JSON parse error:', e);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t</script><style>\n\t\t.json-key {\n\t\t\tcolor: #a6e22e;\n\t\t}\n\t\t.json-string {\n\t\t\tcolor: #f1fa8c;\n\t\t}\n\t\t.json-number {\n\t\t\tcolor: #66d9ef;\n\t\t}\n\t\t.json-boolean {\n\t\t\tcolor: #bd93f9;\n\t\t}\n\t\t.json-null {\n\t\t\tcolor: #ff79c6;\n\t\t}\n\t</style>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
