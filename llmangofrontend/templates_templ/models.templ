package templates_templ

// ModelsPage component displays all available OpenRouter models
templ ModelsPage(baseRoute string) {
	@Layout("Models", baseRoute) {
		<h2>OpenRouter Models</h2>

		<div x-data="{
			searchQuery: '',
			expandedModel: null
		}">
			<div style="margin-bottom: 20px;">
				<div style="display: flex; align-items: center; gap: 10px; margin-bottom: 15px;">
					<input 
						type="text" 
						x-model="searchQuery" 
						placeholder="Search models..." 
						class="form-control" 
						style="max-width: 300px;"
					/>
					<button 
						class="btn btn-primary" 
						@click="$store.modelStore.fetchModels(true)" 
						x-bind:disabled="$store.modelStore.loading"
					>
						<span x-show="$store.modelStore.loading">Loading...</span>
						<span x-show="!$store.modelStore.loading">Refresh Models</span>
					</button>
				</div>
				
				<p x-show="$store.modelStore.lastFetched">
					Last updated: <span x-text="new Date($store.modelStore.lastFetched).toLocaleString()"></span>
				</p>
				<p x-show="$store.modelStore.error" style="color: red;" x-text="$store.modelStore.error"></p>
			</div>

			<div x-show="$store.modelStore.loading" class="loading">Loading models...</div>
			
			<div x-show="!$store.modelStore.loading && $store.modelStore.models.length === 0" class="no-models">
				No models available. Click "Refresh Models" to fetch the latest models.
			</div>

			<div x-show="!$store.modelStore.loading && $store.modelStore.models.length > 0">
				<div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); gap: 15px;">
					<template x-for="model in $store.modelStore.filteredModels(searchQuery)" :key="model.id">
						<div 
							class="card" 
							style="display: flex; flex-direction: column; cursor: pointer;"
							@click="expandedModel = expandedModel === model.id ? null : model.id"
						>
							<!-- Model header -->
							<div style="display: flex; justify-content: space-between; align-items: center;">
								<h3 style="margin: 0;" x-text="model.name"></h3>
								<div>
									<small x-text="new Date(model.created * 1000).toLocaleDateString()"></small>
								</div>
							</div>
							
							<!-- Expandable details -->
							<div x-show="expandedModel === model.id" x-transition>
								<hr style="margin: 10px 0;" />
								
								<div>
									<div>
										<strong>ID:</strong> <code x-text="model.id"></code>
									</div>
									<div>
										<strong>Context Length:</strong> <span x-text="model.context_length.toLocaleString()"></span>
									</div>
									<div>
										<strong>Pricing:</strong> 
										<div style="margin-left: 10px;">
											<div>Prompt: $<span x-text="parseFloat(model.pricing.prompt).toFixed(7)"></span> / token</div>
											<div>Completion: $<span x-text="parseFloat(model.pricing.completion).toFixed(7)"></span> / token</div>
										</div>
									</div>
								</div>
								
								<div style="margin: 10px 0;" x-text="model.description || 'No description available'"></div>
								
								<div>
									<div x-show="model.architecture">
										<strong>Modalities:</strong>
										<div>
											<strong>Input:</strong> 
											<span x-text="model.architecture && model.architecture.input_modalities ? model.architecture.input_modalities.join(', ') : 'text'"></span>
										</div>
										<div>
											<strong>Output:</strong> 
											<span x-text="model.architecture && model.architecture.output_modalities ? model.architecture.output_modalities.join(', ') : 'text'"></span>
										</div>
									</div>
								</div>
							</div>
							
							<!-- Expansion indicator -->
							<div style="text-align: center; margin-top: 5px;">
								<span x-text="expandedModel === model.id ? '▲ Collapse' : '▼ Details'"></span>
							</div>
						</div>
					</template>
				</div>
			</div>
		</div>
	}
} 

// ModelSelector component creates a dropdown to select LLM models
// Parameters:
// - isOpenVar: The Alpine.js variable to control visibility
templ ModelSelector(isOpenVar string) {
	<div x-show={ isOpenVar } x-cloak class="model-selector-overlay">
		<div class="model-selector-container" @click.stop x-data="{
			searchQuery: '',
			models: [],
			loading: true,
			error: null,
			
			init() {
				this.fetchModels();
			},
			
			fetchModels() {
				this.loading = true;
				this.error = null;
				
				fetch('/api/models')
					.then(response => {
						if (!response.ok) throw new Error('Failed to fetch models');
						return response.json();
					})
					.then(data => {
						this.models = data.models || [];
						this.loading = false;
					})
					.catch(error => {
						this.error = error.message;
						this.loading = false;
					});
			},
			
			filteredModels() {
				if (!this.searchQuery) return this.models;
				
				const query = this.searchQuery.toLowerCase();
				return this.models.filter(model => 
					model.name.toLowerCase().includes(query) || 
					model.id.toLowerCase().includes(query)
				);
			},
			
			closeSelector() {
				// Using Alpine's $dispatch to emit an event to the parent
				this.$dispatch('close-model-selector');
			},
			
			selectModel(model) {
				// Using Alpine's $dispatch to emit an event with the selected model
				this.$dispatch('model-selected', { modelId: model.id });
				this.closeSelector();
			}
		}">
			<div class="model-selector-header">
				<h3>Select Model</h3>
				<button
					@click="closeSelector()"
					type="button"
					class="close-button"
					aria-label="Close"
				>×</button>
			</div>
			
			<div class="model-selector-search">
				<input 
					type="text" 
					x-model="searchQuery" 
					placeholder="Search models..." 
					class="form-control"
				/>
			</div>
			
			<div class="model-selector-content">
				<div x-show="loading" class="model-selector-loading">
					Loading models...
				</div>
				
				<div x-show="error" class="model-selector-error">
					<p x-text="error"></p>
					<button @click="fetchModels()" class="btn btn-primary">Retry</button>
				</div>
				
				<div x-show="!loading && !error && filteredModels().length === 0" class="model-selector-empty">
					No models found matching your search.
				</div>
				
				<div x-show="!loading && !error && filteredModels().length > 0" class="model-selector-list">
					<template x-for="model in filteredModels()" :key="model.id">
						<div 
							class="model-selector-item" 
							@click="selectModel(model)"
						>
							<div class="model-selector-item-name" x-text="model.name"></div>
							<div class="model-selector-item-id" x-text="model.id"></div>
						</div>
					</template>
				</div>
			</div>
		</div>
	</div>
	
	<script>
		// Set up event listeners to connect the selector with the parent component
		document.addEventListener('alpine:initialized', () => {
			document.addEventListener('close-model-selector', () => {
				// Find the parent component and set its variable
				Alpine.evaluate(document.querySelector(`[x-data]`), `{ isOpenVar } = false`);
			});
			
			document.addEventListener('model-selected', (event) => {
				// Find the parent component and set its model
				if (event.detail && event.detail.modelId) {
					Alpine.evaluate(document.querySelector(`[x-data]`), `model = '${event.detail.modelId}'`);
				}
			});
		});
	</script>
	
	<style>
		.model-selector-overlay {
			position: fixed;
			top: 0;
			left: 0;
			width: 100%;
			height: 100%;
			background: rgba(0,0,0,0.5);
			display: flex;
			justify-content: center;
			align-items: center;
			z-index: 2000;
		}
		
		.model-selector-container {
			background: white;
			border-radius: 8px;
			width: 90%;
			max-width: 500px;
			max-height: 80vh;
			box-shadow: 0 4px 20px rgba(0,0,0,0.15);
			display: flex;
			flex-direction: column;
		}
		
		.model-selector-header {
			display: flex;
			justify-content: space-between;
			align-items: center;
			padding: 15px 20px;
			border-bottom: 1px solid #eee;
		}
		
		.model-selector-header h3 {
			margin: 0;
			font-size: 1.2rem;
		}
		
		.model-selector-search {
			padding: 10px 20px;
			border-bottom: 1px solid #eee;
		}
		
		.model-selector-content {
			overflow-y: auto;
			max-height: calc(80vh - 130px);
			padding: 10px 0;
		}
		
		.model-selector-loading,
		.model-selector-error,
		.model-selector-empty {
			padding: 20px;
			text-align: center;
			color: #666;
		}
		
		.model-selector-list {
			display: flex;
			flex-direction: column;
		}
		
		.model-selector-item {
			padding: 10px 20px;
			cursor: pointer;
			border-bottom: 1px solid #f5f5f5;
			transition: background-color 0.2s;
		}
		
		.model-selector-item:hover {
			background-color: #f8f8f8;
		}
		
		.model-selector-item-name {
			font-weight: 500;
			margin-bottom: 4px;
		}
		
		.model-selector-item-id {
			font-size: 0.8rem;
			color: #666;
			font-family: monospace;
		}
	</style>
}