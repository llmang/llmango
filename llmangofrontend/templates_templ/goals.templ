package templates_templ

import (
	"fmt"
	"github.com/llmang/llmango/llmango"
)

// GoalCard displays a goal card with details and links
templ GoalCard(id string, goal map[string]interface{}, baseRoute string) {
	<a href={ safeURL(baseRoute + "/goal/" + id) } class="card clickable card-link">
		<h3>{ goal["Title"].(string) }</h3>
		<p class="truncate-text">{ goal["Description"].(string) }</p>
		
		<div class="examples-grid">
			if exampleInput, ok := goal["ExampleInput"]; ok && exampleInput != nil {
				<div class="example-section">
					<h4 class="example-title">Input</h4>
					<div class="json-preview">{ fmt.Sprintf("%v", exampleInput) }</div>
				</div>
			}
			
			if exampleOutput, ok := goal["ExampleOutput"]; ok && exampleOutput != nil {
				<div class="example-section">
					<h4 class="example-title">Output</h4>
					<div class="json-preview">{ fmt.Sprintf("%v", exampleOutput) }</div>
				</div>
			}
		</div>
		
		<p class="card-footer-id">ID: { id }</p>
		
		<!-- Debug info -->
		<details>
			<summary>Debug Info</summary>
			<pre>{ fmt.Sprintf("%#v", goal) }</pre>
		</details>
	</a>
}

// GoalsPage displays a list of all goals
templ GoalsPage(goals map[string]any, baseRoute string) {
	@Layout("Goals", baseRoute) {

	<div>
		<h2>Goals</h2>
		<div class="card-container">
			for id, goalAny := range goals {
				@GoalCard(id, getGoalInfo(goalAny), baseRoute)
			}
		</div>
		
		@CardStyles()
		@JSONFormatter()
		@GoalStyles()
	</div>
	}
}

// GoalDetailPage displays details for a specific goal
templ GoalDetailPage(goalID string, goal any, prompts map[string]*llmango.Prompt, baseRoute string) {
	@Layout("Goal", baseRoute) {
		<div x="data={newPromptOpen:false, editSolutionOpen:false, newSolutionOpen:false}">
		<div 
			x-data="goalDetailData()"
			x-init="init()"
		>
			<div class="goal-header">
				<h2>{ getGoalInfo(goal)["Title"].(string) }</h2>
				<p class="goal-description">{ getGoalInfo(goal)["Description"].(string) }</p>
			</div>

			<div class="goal-card card">
				<h3>Details</h3>
				
				@GoalExamplesSection(goal)
				
				<h3>Solutions</h3>
				@SolutionsList(goalID, goal, prompts, baseRoute)
			</div>

			@NewSolutionModal(goalID, prompts, baseRoute, "newPromptOpen")
			@EditSolutionModal(goalID, prompts, baseRoute, "editSolutionOpen")
			@NewPromptModal(baseRoute, "newSolutionOpen")
		</div>
		</div>
		<script>
			function goalDetailData() {
				return {
					currentSolutionID: '',
					
					init() {
						// Store solution data when edit button is clicked
						this.setupSolutionEditing();
						// Handle the "add new solution" button click
						this.setupNewSolutionButton();
					},
					
					setupSolutionEditing() {
						window.openEditModal = (solutionID, solution) => {
							this.currentSolutionID = solutionID;
							let solutionObj = typeof solution === 'string' ? JSON.parse(solution) : solution;
							
							// Set form values
							document.getElementById('edit-solution-prompt-uid').value = solutionObj.PromptUID;
							document.getElementById('edit-solution-weight').value = solutionObj.Weight;
							document.getElementById('edit-solution-is-canary').checked = solutionObj.IsCanary;
							document.getElementById('edit-solution-max-runs').value = solutionObj.MaxRuns;
							
							// Open the modal
							Alpine.store("edit-solution", true);
						};
					},
					
					setupNewSolutionButton() {
						document.querySelectorAll('.solution-card.add-new').forEach(btn => {
							btn.addEventListener('click', () => {
								Alpine.store("new-solution", true);
							});
						});
					}
				}
			}
		</script>
	}
}

// GoalExamplesSection component for rendering the example input and output
templ GoalExamplesSection(goal any) {
	<div class="examples-container">
		if exampleInput, ok := getGoalInfo(goal)["ExampleInput"]; ok && exampleInput != nil {
			<div class="example-section">
				<h3>Example Input</h3>
				<div class="json-preview">{ exampleInput.(string) }</div>
			</div>
		}
		
		if exampleOutput, ok := getGoalInfo(goal)["ExampleOutput"]; ok && exampleOutput != nil {
			<div class="example-section">
				<h3>Example Output</h3>
				<div class="json-preview">{ exampleOutput.(string) }</div>
			</div>
		}
	</div>
}

// SolutionsList component for rendering the list of solutions
templ SolutionsList(goalID string, goal any, prompts map[string]*llmango.Prompt, baseRoute string) {
	<div class="solutions-container">
		if solutions, ok := getGoalInfo(goal)["Solutions"]; ok && solutions != nil {
			if solutionsMap, isSolutionsMap := solutions.(map[string]interface{}); isSolutionsMap {
				for solutionID, solutionAny := range solutionsMap {
					if solution, ok := solutionAny.(*llmango.Solution); ok {
						@SolutionCard(solutionID, solution)
					}
				}
			}
		}
	</div>
}

// NewSolutionModal component for adding a new solution
templ NewSolutionModal(goalID string,  prompts map[string]*llmango.Prompt, baseRoute string, openVar string) {
	@Modal("Add New Solution", openVar) {
		@SolutionForm("new", prompts, baseRoute)
		
		<script>
			function createNewSolution() {
				// Call API to create solution
				fetch('{ fmt.Sprintf("%s", baseRoute) }/api/solutions/new', {
					method: 'POST',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({
						goalId: '{ fmt.Sprintf("%s", goalID) }',
						promptUid: document.getElementById('new-solution-prompt-uid').value,
						weight: parseInt(document.getElementById('new-solution-weight').value) || 0,
						isCanary: document.getElementById('new-solution-is-canary').checked,
						maxRuns: parseInt(document.getElementById('new-solution-max-runs').value) || 10
					})
				})
				.then(response => response.json())
				.then(data => {
					if (data.success) {
						// Reload page on success
						window.location.reload();
					} else {
						alert('Error: ' + data.error);
					}
				})
				.catch(error => {
					alert('Error: ' + error);
				});
			}
		</script>
	}
}

// EditSolutionModal component for editing an existing solution
templ EditSolutionModal(goalID string, prompts map[string]*llmango.Prompt, baseRoute string, openVar string) {
	@Modal( "Update Solution", openVar) {
		@SolutionForm("edit", prompts, baseRoute)
		
		<button 
			type="button"
			class="btn btn-danger"
			style="float: left; margin-right: auto;"
			@click="deleteSolution()"
		>
			Delete
		</button>
		
		<script>
			function deleteSolution() {
				if (confirm('Are you sure you want to delete this solution?')) {
					fetch('{ fmt.Sprintf("%s", baseRoute) }/api/solutions/' + currentSolutionID + '/delete', {
						method: 'POST',
						headers: { 'Content-Type': 'application/json' },
						body: JSON.stringify({
							goalId: '{ fmt.Sprintf("%s", goalID) }'
						})
					})
					.then(response => response.json())
					.then(data => {
						if (data.success) {
							window.location.reload();
						} else {
							alert('Error: ' + data.error);
						}
					})
					.catch(error => {
						alert('Error: ' + error);
					});
				}
			}
			
			function updateSolution() {
				// Call API to update solution
				fetch('{ fmt.Sprintf("%s", baseRoute) }/api/solutions/' + currentSolutionID + '/update', {
					method: 'POST',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({
						goalId: '{ fmt.Sprintf("%s", goalID) }',
						promptUid: document.getElementById('edit-solution-prompt-uid').value,
						weight: parseInt(document.getElementById('edit-solution-weight').value) || 0,
						isCanary: document.getElementById('edit-solution-is-canary').checked,
						maxRuns: parseInt(document.getElementById('edit-solution-max-runs').value) || 10
					})
				})
				.then(response => response.json())
				.then(data => {
					if (data.success) {
						// Reload page on success
						window.location.reload();
					} else {
						alert('Error: ' + data.error);
					}
				})
				.catch(error => {
					alert('Error: ' + error);
				});
			}
		</script>
	}
}

// SolutionForm shared form component for solution data
templ SolutionForm(mode string, prompts map[string]*llmango.Prompt, baseRoute string) {
	<div class="form-group">
		<label class="form-label">Prompt</label>
		<div class="prompt-selector">
			<div class="prompt-select-row">
				<select 
					if mode == "edit" {
						id="edit-solution-prompt-uid"
					} else {
						id="new-solution-prompt-uid"
					}
					class="form-control"
				>
					<option value="">-- Select a prompt --</option>
					for promptID, prompt := range prompts {
						<option value={ promptID }>
							if prompt.UID != "" {
								{ prompt.UID }
							} else {
								{ promptID }
							}
						</option>
					}
				</select>
				<button 
					type="button" 
					class="btn btn-secondary"
					if mode == "edit" {
						id="edit-search-toggle"
					} else {
						id="new-search-toggle"
					}
				>Search</button>
			</div>
			
			<div 
				if mode == "edit" {
					id="edit-prompt-search-dropdown"
				} else {
					id="new-prompt-search-dropdown"
				}
				class="prompt-search-dropdown"
				style="display: none;"
			>
				<div class="form-group">
					<input 
						type="text" 
						if mode == "edit" {
							id="edit-prompt-search"
						} else {
							id="new-prompt-search"
						}
						placeholder="Search prompts..." 
						class="form-control"
					/>
				</div>
				
				<div class="prompt-search-results">
					for promptID, prompt := range prompts {
						<div 
							if mode == "edit" {
								data-search-edit={ fmt.Sprintf("%s %s", promptID, prompt.UID) }
								data-id={ promptID }
								class="prompt-search-item edit-search-item"
							} else {
								data-search-new={ fmt.Sprintf("%s %s", promptID, prompt.UID) }
								data-id={ promptID }
								class="prompt-search-item new-search-item"
							}
						>
							<div class="prompt-item-header">
								<div class="prompt-item-title">
									if prompt.UID != "" {
										{ prompt.UID }
									} else {
										{ promptID }
									}
								</div>
								<small class="prompt-item-model">
									if prompt.Model != "" {
										{ prompt.Model }
									}
								</small>
							</div>
							<div class="prompt-item-id">
								<code>{ promptID }</code>
							</div>
						</div>
					}
				</div>
			</div>
		</div>
		if mode != "edit" {
			<button 
				type="button" 
				id="new-prompt-btn"
				class="btn btn-secondary btn-sm"
				@click="Alpine.store('new-solution', false); Alpine.store('new-prompt', true)"
			>
				Create new prompt
			</button>
		}
	</div>
	
	<div class="form-group">
		<label class="form-label">Weight</label>
		<input 
			type="number" 
			if mode == "edit" {
				id="edit-solution-weight"
			} else {
				id="new-solution-weight"
			}
			min="0" 
			value="1"
			class="form-control"
		/>
	</div>
	
	<div class="form-group">
		<label class="form-check">
			if mode == "edit" {
				<input type="checkbox" 
					id="edit-solution-is-canary"
					onchange="document.getElementById('edit-max-runs-container').style.display = this.checked ? 'block' : 'none';"
				/>
			} else {
				<input type="checkbox" 
					id="new-solution-is-canary"
					onchange="document.getElementById('new-max-runs-container').style.display = this.checked ? 'block' : 'none';"
				/>
			}
			<span class="form-check-label">Is Canary Test</span>
		</label>
	</div>
	
	<div 
		if mode == "edit" {
			id="edit-max-runs-container"
		} else {
			id="new-max-runs-container"
		}
		style="display: none;"
		class="form-group"
	>
		<label class="form-label">Max Runs</label>
		<input 
			type="number" 
			if mode == "edit" {
				id="edit-solution-max-runs"
			} else {
				id="new-solution-max-runs"
			}
			min="1" 
			value="10"
			class="form-control"
		/>
	</div>

	<script>
		if (mode == "edit") {
			document.getElementById('edit-search-toggle').addEventListener('click', function() {
				const dropdown = document.getElementById('edit-prompt-search-dropdown');
				dropdown.style.display = dropdown.style.display === 'none' ? 'block' : 'none';
				this.textContent = dropdown.style.display === 'none' ? 'Search' : 'Hide Search';
			});

			document.getElementById('edit-prompt-search').addEventListener('input', function() {
				const searchText = this.value.toLowerCase();
				document.querySelectorAll('.edit-search-item').forEach(item => {
					const searchableText = item.getAttribute('data-search-edit').toLowerCase();
					item.style.display = searchText === '' || searchableText.includes(searchText) ? 'block' : 'none';
				});
			});

			document.querySelectorAll('.edit-search-item').forEach(item => {
				item.addEventListener('click', function() {
					const promptUID = this.getAttribute('data-id');
					document.getElementById('edit-solution-prompt-uid').value = promptUID;
					document.getElementById('edit-prompt-search-dropdown').style.display = 'none';
					document.getElementById('edit-search-toggle').textContent = 'Search';
				});
			});
		} else {
			document.getElementById('new-search-toggle').addEventListener('click', function() {
				const dropdown = document.getElementById('new-prompt-search-dropdown');
				dropdown.style.display = dropdown.style.display === 'none' ? 'block' : 'none';
				this.textContent = dropdown.style.display === 'none' ? 'Search' : 'Hide Search';
			});

			document.getElementById('new-prompt-search').addEventListener('input', function() {
				const searchText = this.value.toLowerCase();
				document.querySelectorAll('.new-search-item').forEach(item => {
					const searchableText = item.getAttribute('data-search-new').toLowerCase();
					item.style.display = searchText === '' || searchableText.includes(searchText) ? 'block' : 'none';
				});
			});

			document.querySelectorAll('.new-search-item').forEach(item => {
				item.addEventListener('click', function() {
					const promptUID = this.getAttribute('data-id');
					document.getElementById('new-solution-prompt-uid').value = promptUID;
					document.getElementById('new-prompt-search-dropdown').style.display = 'none';
					document.getElementById('new-search-toggle').textContent = 'Search';
				});
			});
		}
	</script>
}

// NewPromptModal component for creating a new prompt
templ NewPromptModal(baseRoute string, openVar string) {
	@Modal("Create Prompt", openVar) {
		<div class="form-group">
			<label class="form-label">UID</label>
			<input 
				type="text" 
				id="new-prompt-uid"
				class="form-control"
				placeholder="Enter a unique identifier"
			/>
		</div>
		
		<div class="form-group">
			<label class="form-label">Model</label>
			<select 
				id="new-prompt-model"
				class="form-control"
			>
				<option value="">-- Select a model --</option>
				<template x-for="model in $store.modelStore.models">
					<option :value="model.id" x-text="model.id"></option>
				</template>
			</select>
			<div x-show="!$store.modelStore.hasModels" class="warning-text">
				No models loaded. Please refresh models from the navigation bar.
			</div>
		</div>
		
		<div class="form-group">
			<label class="form-label">Parameters (JSON)</label>
			<textarea 
				id="new-prompt-parameters"
				class="form-control" 
				rows="3"
				placeholder='{ "temperature": 0.7, "max_tokens": 1000 }'
			></textarea>
		</div>
		
		<div class="form-group">
			<label class="form-label">System Message</label>
			<textarea 
				id="new-prompt-system-message"
				class="form-control" 
				rows="4"
				placeholder="Enter system instructions here..."
			></textarea>
		</div>
		
		<div class="form-group">
			<label class="form-label">User Message</label>
			<textarea 
				id="new-prompt-user-message"
				class="form-control" 
				rows="5"
				placeholder="Enter your prompt here..."
			></textarea>
		</div>
		
		<script>
			function createNewPrompt() {
				try {
					// Create messages array from system and user messages
					const messages = [];
					if (document.getElementById('new-prompt-system-message').value.trim()) {
						messages.push({
							role: "system",
							content: document.getElementById('new-prompt-system-message').value
						});
					}
					
					if (document.getElementById('new-prompt-user-message').value.trim()) {
						messages.push({
							role: "user",
							content: document.getElementById('new-prompt-user-message').value
						});
					}
					
					// Parse parameters
					let parameters = {};
					try {
						parameters = JSON.parse(document.getElementById('new-prompt-parameters').value) || {};
					} catch (e) {
						console.error("Error parsing parameters:", e);
					}
					
					// Call API to create prompt
					fetch('{ fmt.Sprintf("%s", baseRoute) }/api/prompts/new', {
						method: 'POST',
						headers: { 'Content-Type': 'application/json' },
						body: JSON.stringify({
							uid: document.getElementById('new-prompt-uid').value,
							model: document.getElementById('new-prompt-model').value,
							parameters: parameters,
							messages: messages
						})
					})
					.then(response => response.json())
					.then(data => {
						if (data.success) {
							// Set the new prompt as selected in solution form
							document.getElementById('new-solution-prompt-uid').value = data.data.promptUID;
							Alpine.store("new-prompt", false);
							Alpine.store("new-solution", true);
						} else {
							alert('Error: ' + data.error);
						}
					})
					.catch(error => {
						alert('Error: ' + error);
					});
				} catch(err) {
					alert('Error preparing data: ' + err.message);
				}
			}
		</script>
	}
}


// SolutionCard component for rendering individual solution cards
templ SolutionCard(solutionID string, solution *llmango.Solution) {
	<div 
		class="solution-card" 
		@click="openEditModal(solutionID, JSON.stringify(solution))"
		x-data={ fmt.Sprintf("{ solutionData: %s }", templ.EscapeString(jsonStr(solution))) }
	>
		<div class="status-indicator"></div>
		<h4 class="solution-title" title={ solution.PromptUID }>
			if solution.PromptUID != "" {
				{ solution.PromptUID }
			} else {
				No Prompt
			}
		</h4>
		<div class="solution-details">
			<div><strong>Weight:</strong> { intToString(solution.Weight) }</div>
			if solution.IsCanary {
				<div><strong>Runs:</strong> { intToString(solution.TotalRuns) }/{ intToString(solution.MaxRuns) }</div>
			}
		</div>
	</div>
}



// Updated GoalStyles component with all required CSS
templ GoalStyles() {
	<style>
		.goal-header {
			margin-bottom: 20px;
		}
		
		.goal-description {
			color: #555;
			margin-bottom: 25px;
		}
		
		.goal-card {
			padding: 20px;
			margin-bottom: 30px;
		}
		
		.examples-container {
			display: grid;
			grid-template-columns: 1fr 1fr;
			gap: 20px;
			margin: 20px 0 30px 0;
		}
		
		@media (max-width: 768px) {
			.examples-container {
				grid-template-columns: 1fr;
			}
		}
		
		.solutions-container {
			display: flex;
			flex-wrap: wrap;
			gap: 15px;
			margin-bottom: 20px;
		}

		.solution-card {
			width: 180px; 
			padding: 15px; 
			border: 1px solid #ddd; 
			border-radius: 5px; 
			position: relative;
			cursor: pointer;
		}

		.solution-card.add-new {
			width: 180px; 
			height: 140px;
			padding: 15px; 
			border: 1px dashed #aaa; 
			border-radius: 5px;
			display: flex;
			justify-content: center;
			align-items: center;
			background: #f9f9f9;
		}

		.status-indicator {
			position: absolute; 
			top: 10px; 
			right: 10px; 
			width: 12px; 
			height: 12px; 
			border-radius: 50%;
		}

		.solution-title {
			margin-top: 0; 
			margin-bottom: 10px; 
			white-space: nowrap; 
			overflow: hidden; 
			text-overflow: ellipsis;
		}

		.solution-details {
			font-size: 14px;
		}

		.add-new-content {
			text-align: center;
		}

		.plus-icon {
			font-size: 24px; 
			margin-bottom: 10px;
		}
		
		.prompt-selector {
			position: relative;
		}
		
		.prompt-select-row {
			display: flex; 
			gap: 10px; 
			align-items: center;
		}
		
		.prompt-search-dropdown {
			position: absolute; 
			top: 100%; 
			left: 0; 
			width: 100%; 
			background: white; 
			border: 1px solid #ddd; 
			border-radius: 4px; 
			z-index: 100; 
			margin-top: 5px; 
			max-height: 300px; 
			overflow-y: auto; 
			padding: 10px; 
			box-shadow: 0 4px 8px rgba(0,0,0,0.1);
		}
		
		.prompt-search-results {
			display: flex; 
			flex-direction: column; 
			gap: 5px;
		}
		
		.prompt-search-item {
			cursor: pointer; 
			padding: 5px; 
			border-radius: 3px;
		}
		
		.prompt-search-item:hover {
			background-color: #f5f5f5;
		}
		
		.prompt-search-item.active {
			background-color: #e9eef1;
		}
		
		.prompt-item-header {
			display: flex; 
			justify-content: space-between; 
			align-items: center;
		}
		
		.prompt-item-title {
			font-weight: bold;
		}
		
		.prompt-item-model {
			font-size: 0.8rem;
		}
		
		.prompt-item-id {
			font-size: 0.8rem;
		}
		
		.btn-sm {
			margin-top: 5px; 
			font-size: 12px;
		}
		
		.close-button {
			background: none;
			border: none;
			font-size: 1.5rem;
			cursor: pointer;
			position: absolute;
			top: 10px;
			right: 10px;
		}
	</style>
}