package templates_templ

import (
	"github.com/llmang/llmango/llmango"
	"encoding/json"
)

// LogTable displays a table of logs with the provided data
templ LogTable() {
    <div class="logs-container">
        <template x-if="logs.length > 0">
            <div class="log-table">
                <div class="log-header-row">
                    <div class="log-cell">Time</div>
                    <div class="log-cell">Goal ID</div>
                    <div class="log-cell">Prompt ID</div>
                    <div class="log-cell">Tokens</div>
                    <div class="log-cell">Cost</div>
                    <div class="log-cell">Actions</div>
                </div>
                <template x-for="log in logs" :key="log.timestamp">
                    <div class="log-row-container">
                        <div class="log-row">
                            <div class="log-cell" :title="new Date(log.timestamp * 1000).toLocaleString()">
                                <span x-text="new Date(log.timestamp * 1000).toLocaleString('en-GB', {day: '2-digit', month: '2-digit', year: '2-digit', hour: '2-digit', minute: '2-digit', second: '2-digit'})"></span>
                            </div>
                            <div class="log-cell" :title="log.goalUID">
                                <span x-text="log.goalUID.substring(0, 10) + (log.goalUID.length > 10 ? '...' : '')"></span>
                            </div>
                            <div class="log-cell" :title="log.promptUID">
                                <span x-text="log.promptUID.substring(0, 10) + (log.promptUID.length > 10 ? '...' : '')"></span>
                            </div>
                            <div class="log-cell" :title="'Input: ' + log.inputTokens + ' tokens, Output: ' + log.outputTokens + ' tokens'">
                                <span class="token-count" :title="'Input Tokens: ' + log.inputTokens" x-text="log.inputTokens"></span> / 
                                <span class="token-count" :title="'Output Tokens: ' + log.outputTokens" x-text="log.outputTokens"></span>
                            </div>
                            <div class="log-cell" :title="'Total cost: $' + log.cost">
                                <span x-text="'$' + log.cost"></span>
                            </div>
                            <div class="log-cell">
                                <button 
                                    class="btn btn-sm btn-secondary"
                                    @click="log.showDetails = !log.showDetails"
                                >
                                    <span x-text="log.showDetails ? 'Hide' : 'Show'"></span> Details
                                </button>
                            </div>
                        </div>
                        <div 
                            class="log-details"
                            x-show="log.showDetails"
                            x-transition
                        >
                            <div class="details-row">
                                <div class="details-cell">
                                    <h5>Goal ID</h5>
                                    <pre x-text="log.goalUID"></pre>
                                </div>
                                <div class="details-cell">
                                    <h5>Prompt ID</h5>
                                    <pre x-text="log.promptUID"></pre>
                                </div>
                            </div>
                            <div class="log-section">
                                <h5>Input</h5>
                                <pre x-text="log.inputObject"></pre>
                            </div>
                            <div class="log-section">
                                <h5>Output</h5>
                                <pre x-text="log.outputObject"></pre>
                            </div>
                            <template x-if="log.error">
                                <div class="log-section error">
                                    <h5>Error</h5>
                                    <pre x-text="log.error"></pre>
                                </div>
                            </template>
                        </div>
                    </div>
                </template>
            </div>
        </template>
        <template x-if="logs.length === 0">
            <p class="no-logs">No logs found. Try adjusting your filters.</p>
        </template>
    </div>
}

// PaginationView handles data loading and pagination for logs
templ PaginationView() {
    <div class="pagination-view">
        @LogTable()
        
        <div class="pagination" x-show="totalPages > 1">
            <button @click="prevPage()" :disabled="currentPage === 1">Previous</button>
            <span>Page <span x-text="currentPage"></span> of <span x-text="totalPages"></span></span>
            <button @click="nextPage()" :disabled="currentPage === totalPages">Next</button>
        </div>

        <div class="loading" x-show="isLoading">
            Loading logs...
        </div>
    </div>
}

// LogLoader loads logs based on a specific value
templ LogLoader(baseRoute string) {
    <div 
        class="log-loader"
        x-data="{ 
            logs: [],
            currentPage: 1,
            totalPages: 1,
            isLoading: false,
            filterOptions: {
                goalId: null,
                promptId: null,
                perPage: 10
            },
            async loadLogs() {
                this.isLoading = true;
                try {
                    let url = '/mango/api/logs';
                    
                    // Add filter parameters
                    const params = new URLSearchParams();
                    params.append('page', this.currentPage.toString());
                    params.append('perPage', this.filterOptions.perPage.toString());
                    
                    // Add all filter options to params
                    if (this.filterOptions.goalId) {
                        params.append('goalId', this.filterOptions.goalId);
                    }
                    if (this.filterOptions.promptId) {
                        params.append('promptId', this.filterOptions.promptId);
                    }
                    
                    const response = await fetch(url + '?' + params.toString());
                    const data = await response.json();
                    if (data.success) {
                        this.logs = data.data.logs || [];
                        this.totalPages = data.data.pagination.totalPages;
                    }
                } catch (error) {
                    console.error('Failed to load logs:', error);
                }
                this.isLoading = false;
            },
            async prevPage() {
                if (this.currentPage > 1) {
                    this.currentPage--;
                    await this.loadLogs();
                }
            },
            async nextPage() {
                if (this.currentPage < this.totalPages) {
                    this.currentPage++;
                    await this.loadLogs();
                }
            }
        }"
        x-init="loadLogs()"
    >
        @PaginationView()
    </div>
}

// LogPage is the main page for viewing logs with filters
templ LogPage(baseRoute string, initialGoals map[string]any, initialPrompts map[string]*llmango.Prompt) {
    @Layout("Logs", baseRoute) {
    <!-- Store data in hidden data attributes -->
    <div 
        id="data-container" 
        style="display: none;"
    ></div>
    
    <div class="debug-json" style="display: none;">
        <pre id="goals-data" data-goals={jsonStr(initialGoals)}></pre>
        <pre id="prompts-data" data-prompts={jsonStr(initialPrompts)}></pre>
    </div>

    <div 
        class="log-page"
        x-data="{ 
            logs: [],
            currentPage: 1,
            totalPages: 1,
            isLoading: false,
            filterOptions: {
                goalId: null,
                promptId: null,
                perPage: 10
            },
            goals: {},
            prompts: {},
            async loadLogs() {
                this.isLoading = true;
                
                // Load the data from data attributes
                try {
                    const goalsData = document.getElementById('goals-data').getAttribute('data-goals');
                    const promptsData = document.getElementById('prompts-data').getAttribute('data-prompts');
                    
                    if (goalsData) this.goals = JSON.parse(goalsData);
                    if (promptsData) this.prompts = JSON.parse(promptsData);
                } catch (error) {
                    console.error('Failed to parse JSON data:', error);
                }
                
                try {
                    let url = '/mango/api/logs';
                    
                    // Add filter parameters
                    const params = new URLSearchParams();
                    params.append('page', this.currentPage.toString());
                    params.append('perPage', this.filterOptions.perPage.toString());
                    
                    // Add all filter options to params
                    if (this.filterOptions.goalId) {
                        params.append('goalId', this.filterOptions.goalId);
                    }
                    if (this.filterOptions.promptId) {
                        params.append('promptId', this.filterOptions.promptId);
                    }
                    
                    const response = await fetch(url + '?' + params.toString());
                    const data = await response.json();
                    if (data.success) {
                        this.logs = data.data.logs || [];
                        this.totalPages = data.data.pagination.totalPages;
                    }
                } catch (error) {
                    console.error('Failed to load logs:', error);
                }
                this.isLoading = false;
            },
            async prevPage() {
                if (this.currentPage > 1) {
                    this.currentPage--;
                    await this.loadLogs();
                }
            },
            async nextPage() {
                if (this.currentPage < this.totalPages) {
                    this.currentPage++;
                    await this.loadLogs();
                }
            },
            resetFilters() {
                this.filterOptions = {
                    goalId: null,
                    promptId: null,
                    perPage: 10
                };
                this.currentPage = 1;
                this.loadLogs();
            }
        }"
        x-init="loadLogs()"
    >
        <div class="filters-section">
            <h3>Filter Logs</h3>
            <div class="filter-controls">
                <div class="filter-group">
                    <label for="goalFilter">Goal:</label>
                    <select id="goalFilter" x-model="filterOptions.goalId" @change="currentPage = 1; loadLogs()">
                        <option value="">All Goals</option>
                        <template x-for="(goal, id) in goals" :key="id">
                            <option :value="id" x-text="goal.Title || id"></option>
                        </template>
                    </select>
                </div>
                
                <div class="filter-group">
                    <label for="promptFilter">Prompt:</label>
                    <select id="promptFilter" x-model="filterOptions.promptId" @change="currentPage = 1; loadLogs()">
                        <option value="">All Prompts</option>
                        <template x-for="(prompt, id) in prompts" :key="id">
                            <option :value="id" x-text="prompt.Name || id"></option>
                        </template>
                    </select>
                </div>
                
                <div class="filter-group">
                    <label for="perPageFilter">Per Page:</label>
                    <select id="perPageFilter" x-model="filterOptions.perPage" @change="currentPage = 1; loadLogs()">
                        <option value="5">5</option>
                        <option value="10">10</option>
                        <option value="20">20</option>
                        <option value="50">50</option>
                    </select>
                </div>
                
                <button class="btn btn-secondary" @click="resetFilters">Reset Filters</button>
            </div>
        </div>
        
        <!-- Logs Table -->
        <div class="logs-container">
            <template x-if="logs.length > 0">
                <div class="log-table">
                    <div class="log-header-row">
                        <div class="log-cell">Time</div>
                        <div class="log-cell">Goal ID</div>
                        <div class="log-cell">Prompt ID</div>
                        <div class="log-cell">Tokens</div>
                        <div class="log-cell">Cost</div>
                        <div class="log-cell">Actions</div>
                    </div>
                    <template x-for="log in logs" :key="log.timestamp">
                        <div class="log-row-container">
                            <div class="log-row">
                                <div class="log-cell" :title="new Date(log.timestamp * 1000).toLocaleString()">
                                    <span x-text="new Date(log.timestamp * 1000).toLocaleString('en-GB', {day: '2-digit', month: '2-digit', year: '2-digit', hour: '2-digit', minute: '2-digit', second: '2-digit'})"></span>
                                </div>
                                <div class="log-cell" :title="log.goalUID">
                                    <span x-text="log.goalUID.substring(0, 10) + (log.goalUID.length > 10 ? '...' : '')"></span>
                                </div>
                                <div class="log-cell" :title="log.promptUID">
                                    <span x-text="log.promptUID.substring(0, 10) + (log.promptUID.length > 10 ? '...' : '')"></span>
                                </div>
                                <div class="log-cell" :title="'Input: ' + log.inputTokens + ' tokens, Output: ' + log.outputTokens + ' tokens'">
                                    <span class="token-count" :title="'Input Tokens: ' + log.inputTokens" x-text="log.inputTokens"></span> / 
                                    <span class="token-count" :title="'Output Tokens: ' + log.outputTokens" x-text="log.outputTokens"></span>
                                </div>
                                <div class="log-cell" :title="'Total cost: $' + log.cost">
                                    <span x-text="'$' + log.cost"></span>
                                </div>
                                <div class="log-cell">
                                    <button 
                                        class="btn btn-sm btn-secondary"
                                        @click="log.showDetails = !log.showDetails"
                                    >
                                        <span x-text="log.showDetails ? 'Hide' : 'Show'"></span> Details
                                    </button>
                                </div>
                            </div>
                            <div 
                                class="log-details"
                                x-show="log.showDetails"
                                x-transition
                            >
                                <div class="details-row">
                                    <div class="details-cell">
                                        <h5>Goal ID</h5>
                                        <pre x-text="log.goalUID"></pre>
                                    </div>
                                    <div class="details-cell">
                                        <h5>Prompt ID</h5>
                                        <pre x-text="log.promptUID"></pre>
                                    </div>
                                </div>
                                <div class="log-section">
                                    <h5>Input</h5>
                                    <pre x-text="log.inputObject"></pre>
                                </div>
                                <div class="log-section">
                                    <h5>Output</h5>
                                    <pre x-text="log.outputObject"></pre>
                                </div>
                                <template x-if="log.error">
                                    <div class="log-section error">
                                        <h5>Error</h5>
                                        <pre x-text="log.error"></pre>
                                    </div>
                                </template>
                            </div>
                        </div>
                    </template>
                </div>
            </template>
            <template x-if="logs.length === 0">
                <p class="no-logs">No logs found. Try adjusting your filters.</p>
            </template>
        </div>

        <div class="pagination" x-show="totalPages > 1">
            <button @click="prevPage()" :disabled="currentPage === 1">Previous</button>
            <span>Page <span x-text="currentPage"></span> of <span x-text="totalPages"></span></span>
            <button @click="nextPage()" :disabled="currentPage === totalPages">Next</button>
        </div>

        <div class="loading" x-show="isLoading">
            Loading logs...
        </div>
    </div>
    }
}

func serializeJSON(v interface{}) string {
    if v == nil {
        return "{}"
    }
    data, err := json.Marshal(v)
    if err != nil {
        return "{}"
    }
    return string(data)
}

// LogViewer component displays logs from the system
templ LogViewer(baseRoute string, initialGoals map[string]any, initialPrompts map[string]*llmango.Prompt) {
    <div class="log-viewer">
        @LogPage(baseRoute, initialGoals, initialPrompts)
    </div>
}

// LogStyles component contains CSS styles for log components
templ LogStyles() {
    <style>

        .log-table {
        width: 100%;
        border-collapse: collapse;
    }

    .log-header-row {
        display: flex;
        padding: 0.5rem;
        background-color: #f5f5f5;
        font-weight: bold;
        border-bottom: 2px solid #ddd;
    }

    .log-row-container {
        display: flex;
        flex-direction: column;
        border-bottom: 1px solid #eee;
    }

    .log-row {
        display: flex;
        padding: 0.5rem;
        align-items: center;
        font-size: 0.85rem;
    }

    .log-cell {
        flex: 1;
        padding: 0 0.5rem;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .log-cell[title]:hover {
        cursor: help;
    }

    .token-count {
        display: inline-block;
        min-width: 2.5rem;
        text-align: right;
    }



    .log-details {
        width: 100%;
        padding: 1rem;
        background-color: #f8f8f8;
        border-top: 1px solid #ddd;
        font-size: 1rem;
    }

    .details-row {
        display: flex;
        gap: 1rem;
        margin-bottom: 1rem;
    }

    .details-cell {
        flex: 1;
    }

    .details-cell h5 {
        margin: 0 0 0.5rem 0;
        color: #666;
    }

    .details-cell pre {
        background-color: #fff;
        padding: 0.5rem;
        border-radius: 0.25rem;
        overflow-x: auto;
        margin: 0;
        white-space: pre-wrap;
        word-wrap: break-word;
    }



        .log-section:last-child {
            margin-bottom: 0;
        }

        .log-section h5 {
            margin: 0 0 0.5rem 0;
            color: #666;
        }

        .log-section pre {
            background-color: #fff;
            padding: 0.5rem;
            border-radius: 0.25rem;
            overflow-x: auto;
            margin: 0;
            white-space: pre-wrap;
            word-wrap: break-word;
        }

        .log-section.error {
            color: #dc3545;
        }
        /* Log viewer styles */
        .filters-section {
            background-color: #f8f8f8;
            border-radius: 5px;
            padding: 15px;
            margin-bottom: 20px;
        }
        
        .filters-section h3 {
            margin-top: 0;
            margin-bottom: 15px;
        }
        
        .filter-controls {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            align-items: flex-end;
        }
        
        .filter-group {
            display: flex;
            flex-direction: column;
            min-width: 150px;
        }
        
        .filter-group label {
            margin-bottom: 5px;
            font-size: 0.9rem;
        }
        
        .log-viewer {
            margin-top: 20px;
        }
        
        .logs-container {
            margin-bottom: 20px;
        }
        
        .log-table {
            width: 100%;
            border-collapse: collapse;
        }
        
        .log-header-row {
            background-color: #f5f5f5;
            font-weight: bold;
            display: flex;
        }
        
        .log-row {
            display: flex;
            border-bottom: 1px solid #eee;
        }
        
        .log-cell {
            padding: 10px;
            flex: 1;
            min-width: 0;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }
        
        .log-details {
            padding: 15px;
            background-color: #f9f9f9;
            border-bottom: 1px solid #eee;
        }
        
        .details-row {
            display: flex;
            margin-bottom: 15px;
        }
        
        .details-cell {
            flex: 1;
            padding-right: 15px;
        }
        
        .log-section {
            margin-bottom: 15px;
        }
        
        .log-section h5 {
            margin-top: 0;
            margin-bottom: 5px;
        }
        
        .token-count {
            font-family: monospace;
        }
        
        .error {
            color: #d32f2f;
        }
        
        .pagination {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 15px;
            margin-top: 20px;
        }
        
        .loading {
            text-align: center;
            padding: 20px;
            font-style: italic;
            color: #666;
        }
        
        .no-logs {
            text-align: center;
            padding: 20px;
            color: #666;
            font-style: italic;
        }

            .pagination {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 1rem;
        margin-top: 1rem;
    }
        
        /* JSON formatter styles */
        .json-container {
            font-family: monospace;
            background: #f5f5f5;
            padding: 10px;
            border-radius: 4px;
            white-space: pre-wrap;
        }
    </style>
} 