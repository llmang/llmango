var P=Object.defineProperty;var _=s=>{throw TypeError(s)};var k=(s,t,e)=>t in s?P(s,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):s[t]=e;var r=(s,t,e)=>k(s,typeof t!="symbol"?t+"":t,e),x=(s,t,e)=>t.has(s)||_("Cannot "+e);var n=(s,t,e)=>(x(s,t,"read from private field"),e?e.call(s):t.get(s)),u=(s,t,e)=>t.has(s)?_("Cannot add the same private member more than once"):t instanceof WeakSet?t.add(s):t.set(s,e);import{b as w,w as g,g as d,d as y,u as U}from"./C7yO5yPs.js";const $="/mango/api";class f{constructor(t={}){r(this,"temperature");r(this,"max_tokens");r(this,"top_p");r(this,"frequency_penalty");r(this,"presence_penalty");this.temperature=t.temperature,this.max_tokens=t.max_tokens,this.top_p=t.top_p,this.frequency_penalty=t.frequency_penalty,this.presence_penalty=t.presence_penalty}toJSON(){const t={};return this.temperature!==void 0&&(t.temperature=this.temperature),this.max_tokens!==void 0&&(t.max_tokens=this.max_tokens),this.top_p!==void 0&&(t.top_p=this.top_p),this.frequency_penalty!==void 0&&(t.frequency_penalty=this.frequency_penalty),this.presence_penalty!==void 0&&(t.presence_penalty=this.presence_penalty),t}static fromObject(t){return t?new f({temperature:t.temperature,max_tokens:t.max_tokens,top_p:t.top_p,frequency_penalty:t.frequency_penalty,presence_penalty:t.presence_penalty}):new f}}var l,h,c;class O{constructor(){u(this,l,w(g({})));u(this,h,w(g({})));u(this,c,U(()=>{const t={};return Object.values(this.prompts).forEach(e=>{t[e.goalUID]||(t[e.goalUID]=[]),t[e.goalUID].push(e)}),t}));r(this,"isLoaded",!1);r(this,"baseUrl");r(this,"initializationPromise",null);r(this,"updateGoal",async(t,e,a)=>{const o=`${this.baseUrl}/goal/${t}/update`,i=await fetch(o,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({title:e,description:a})});if(!i.ok)throw new Error(`Failed to update goal: ${i.statusText}`);this.goals[t]&&(this.goals[t]={...this.goals[t],title:e,description:a})});r(this,"createPrompt",async t=>{const e=`${this.baseUrl}/prompt/create`,a=await fetch(e,{method:"POST",body:JSON.stringify(t)});if(!a.ok)throw new Error(`Failed to create prompt: ${a.statusText}`);this.prompts[t.UID]=t});r(this,"updatePrompt",async(t,e)=>{const a=`${this.baseUrl}/prompts/${t}/update`,o=await fetch(a,{method:"POST",body:JSON.stringify(e)});if(!o.ok)throw new Error(`Failed to update prompt: ${o.statusText}`);this.prompts[t]=e});r(this,"deletePrompt",async t=>{const e=`${this.baseUrl}/prompt/delete`,a=await fetch(e,{method:"POST",body:JSON.stringify({promptUID:t})});if(!a.ok)throw new Error(`Failed to delete prompt: ${a.statusText}`);delete this.prompts[t]});r(this,"updateAPIKey",async t=>{const e=`${this.baseUrl}/update-key`,a=await fetch(e,{method:"POST",body:JSON.stringify({apiKey:t})});if(!a.ok){const o=await a.text();throw new Error(`Failed to update API key: ${o}`)}});this.baseUrl=$}get prompts(){return d(n(this,l))}set prompts(t){y(n(this,l),t,!0)}get goals(){return d(n(this,h))}set goals(t){y(n(this,h),t,!0)}get promptsByGoalUID(){return d(n(this,c))}set promptsByGoalUID(t){y(n(this,c),t)}async initialize(){return this.initializationPromise?this.initializationPromise:(this.initializationPromise=Promise.resolve().then(()=>this.loadAllData(!1)),this.initializationPromise)}async reload(){await this.loadAllData()}async loadAllData(t=!1){if(!(this.isLoaded&&!t))try{const[e,a]=await Promise.all([fetch(`${this.baseUrl}/goals`),fetch(`${this.baseUrl}/prompts`)]);if(!e.ok||!a.ok)throw new Error("Failed to fetch data");const o=await e.json();this.goals=o.reduce((i,p)=>(i[p.UID]=p,i),{});const m=await a.json();this.prompts=m.reduce((i,p)=>(i[p.UID]=p,i),{}),this.isLoaded=!0}catch(e){throw console.error("Failed to load data:",e),e}}}l=new WeakMap,h=new WeakMap,c=new WeakMap;const b=new O;b.initialize();export{$ as A,f as P,b as l};
