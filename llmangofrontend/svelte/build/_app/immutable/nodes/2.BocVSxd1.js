import{t as v,a as s,c as P}from"../chunks/BI9x2Sv-.js";import{p as na,b as y,w as va,a as pa,d as m,s as i,c as r,g as n,r as l,t as da,f as b,n as ga}from"../chunks/C7yO5yPs.js";import{s as ca}from"../chunks/C2vv__MR.js";import{i as d}from"../chunks/BGOvWai6.js";import{e as R,i as F}from"../chunks/CSQrPbMc.js";import{s as C}from"../chunks/DIyWOdGJ.js";import{o as ma}from"../chunks/BREDD7G0.js";import{b as D}from"../chunks/6usKf036.js";import{l as f}from"../chunks/C2QKWiPL.js";import{P as fa}from"../chunks/TtOy7PfW.js";import{G as ua}from"../chunks/BKFLuHvi.js";import{l as ha,L as _a}from"../chunks/BVqQsvwE.js";var La=v("<p>Loading...</p>"),ya=v('<p class="error"> </p>'),ba=v("<p>Loading logs...</p>"),ja=v("<p>No logs available</p>"),wa=v("<p>No goals available</p>"),Ma=v("<p>No prompts available</p>"),Aa=v(`<div class="section svelte-1ljl96t"><div class="section-header svelte-1ljl96t"><h2 class="svelte-1ljl96t">Recent Logs</h2> <a class="svelte-1ljl96t">View All</a></div> <!></div> <div class="section svelte-1ljl96t"><div class="section-header svelte-1ljl96t"><h2 class="svelte-1ljl96t">Recent Goals</h2> <a class="svelte-1ljl96t">View All</a></div> <div class="card-container"><!></div></div> <div class="section svelte-1ljl96t"><div class="section-header svelte-1ljl96t"><h2 class="svelte-1ljl96t">Recent Prompts</h2> <a class="svelte-1ljl96t">View All</a></div> <div class="card-container"><!></div></div> <hr> <div class="section svelte-1ljl96t"><h2 class="svelte-1ljl96t">How LLMango Works</h2> <p>LLMango streamlines the process of integrating and managing Large Language Models (LLMs) in your applications:</p> <ol><li><strong>Define Goals:</strong> Define goals in your code, using input and output structs to specify the data for your LLM tasks.</li> <li><strong>Add Prompts:</strong> Add prompts that utilize JSON string tags as variable names for variable replacement, using the format <code>&#123;&#123;variableName&#125;&#125;</code> to ensure proper escaping in Svelte.</li> <li><strong>Save Configuration:</strong> Select a method to save your configuration. You can choose JSON, SQLite, or build your own adapter to ensure persistence in case of a restart or crash.</li> <li><strong>Store and View Logs:</strong> Choose a way to store and view logs. The default is SQLite, but it's an interface, so you can build a logger for any system. The default LLMango frontend provides a way to view your log results.</li> <li><strong>Enhance and Analyze:</strong> Easily add new prompts, perform data analysis on your prompts, run tests, and compare results of different prompts or prompt versions.</li></ol> <p>This approach ensures easy addition of new prompts and models, complete observability, and robust management of your LLM integrations.</p></div>`,1),Sa=v('<div class="home-page"><div class="page-header"><h1>LLMango Dashboard</h1></div> <!></div>');function Ra(I,J){na(J,!0);let E=y(!0),j=y(null),L=y(va([])),w=y(!1);ma(async()=>{try{await f.initialize()}catch(e){m(j,e instanceof Error?e.message:"Failed to load data",!0)}try{m(w,!0);const e=await ha.getAllLogs({includeRaw:!0,limit:5,offset:0});m(L,(e==null?void 0:e.logs)??[],!0)}catch(e){console.error("Failed to load recent logs:",e),m(L,[],!0)}finally{m(w,!1),m(E,!1)}});var M=Sa(),Q=i(r(M),2);{var H=e=>{var A=La();s(e,A)},U=(e,A)=>{{var W=g=>{var c=ya(),u=r(c,!0);l(c),da(()=>ca(u,n(j))),s(g,c)},Y=g=>{var c=Aa(),u=b(c),S=r(u),q=i(r(S),2);C(q,"href",`${D}/logs`),l(S);var B=i(S,2);{var K=a=>{var t=ba();s(a,t)},X=(a,t)=>{{var h=o=>{_a(o,{get logs(){return n(L)},cells:5})},_=o=>{var p=ja();s(o,p)};d(a,o=>{n(L).length>0?o(h):o(_,!1)},t)}};d(B,a=>{n(w)?a(K):a(X,!1)})}l(u);var x=i(u,2),N=r(x),Z=i(r(N),2);C(Z,"href",`${D}/goal`),l(N);var G=i(N,2),$=r(G);{var aa=a=>{var t=P(),h=b(t);R(h,17,()=>Object.entries(f.goals).slice(0,2),F,(_,o)=>{let p=()=>n(o)[1];var z=P(),la=b(z);{var ia=k=>{ua(k,{get goal(){return p()}})};d(la,k=>{p()&&k(ia)})}s(_,z)}),s(a,t)},ea=a=>{var t=wa();s(a,t)};d($,a=>{Object.keys(f.goals).length>0?a(aa):a(ea,!1)})}l(G),l(x);var T=i(x,2),O=r(T),ta=i(r(O),2);C(ta,"href",`${D}/prompt`),l(O);var V=i(O,2),sa=r(V);{var oa=a=>{var t=P(),h=b(t);R(h,17,()=>Object.entries(f.prompts).slice(0,2),F,(_,o)=>{let p=()=>n(o)[1];fa(_,{get prompt(){return p()},get goal(){return f.goals[p().goalUID]}})}),s(a,t)},ra=a=>{var t=Ma();s(a,t)};d(sa,a=>{Object.keys(f.prompts).length>0?a(oa):a(ra,!1)})}l(V),l(T),ga(4),s(g,c)};d(e,g=>{n(j)?g(W):g(Y,!1)},A)}};d(Q,e=>{n(E)?e(H):e(U,!1)})}l(M),s(I,M),pa()}export{Ra as component};
